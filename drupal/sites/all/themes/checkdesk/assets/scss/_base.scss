@charset "UTF-8";
// ## Checkdesk Theme 
//
// If 1170px is the target width from our photoshop files, we don't want to use pixels to express that for all clients. That size will remain the (desktop) frame of reference, but a more mobile-friendly approach is to express the layout in percentages. Additionally, each unit should ideally be expressed as some fraction of other units. This gives mathematically compliant layouts which are easier to customize with media queries. 
// So we convert 1170px into 24 columns, with a gutter of 10px:
//
//     1170 / 24 = 48.75
//
// Now we want to know the ratio of that column to the whole thing: if 48.75px is the $column-width and 1170px is the $total-width then each column is 48.75 / 1170 or about 4.166666666667 percent and (4.166666666667 * 24), is 1.
//
// Once we have done this calculation, we know how wide a column should be, and we can derive simlar measurements for standard padding or other reusable units. Ideally elements should be driven by variables that have a relationship to the overall scheme of ratios. // This way we can express ourselves continously in units of the grid. 

// Typography: webfonts
//
// Apparently these webfont @imports are best served first.
// As per https://github.com/chriseppstein/compass/issues/639
// - CGB Nov 2012
//
// "Open Sans"
@import url("http://fonts.googleapis.com/css?family=Open+Sans:400italic,400,700,300");

// Typography configuration 
//
// See also: typography.scss - sitewide typography styles
// See also: override_ctb/type.css - slight fork of twitter bootstrap type.less
$sans-font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
$serif-font-family: Georgia, "Times New Roman", Times, serif;
$mono-font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
$smallest-font-size: 0.6em;
$small-font-size: 0.8em;
$base-font-size: 1em;
$large-font-size: 1.3em;
$x-large-font-size: 2.5em;
$xx-large-font-size: 4em;
$base-line-height: 1.2 * $base-font-size; // (1.2 * 16 = 19.2px, same as TB)

// Proportions
//
// Natural language shortcuts that help document the grid.
// We round down to avoid errors.
@function twelveth-of($width) { @return $width / 12; }
@function sixth-of($width)    { @return $width / 6; }
@function fifth-of($width)    { @return $width / 5; }
@function fourth-of($width)   { @return $width / 4; }
@function third-of($width)    { @return $width / 3; }
@function half-of($width)     { @return $width / 2; }

// Grid configuration
//
// The basic grid for Checkdesk, using Susy.
// Note that these also feed bootstrap variables; see variables.scss.
// These can be overridden in media breakpoints and used to recalculate the grid sizes.
// Further reading: http://susy.oddbird.net
//

// For testing
// $from-direction: right;

@mixin full {
  @include span-columns($fw, $fw);
}

// The key variable: columns count for a grid
// used as a context
$cw: 6;
$total-width: $cw;

// Tabs on the login page
$tabs-width: $cw;
$tw: $tabs-width; // Alias

// Use ratios of $gutter-width whenever you need a small amount of padding
$gutter-width: 1em; // The distance between grid columns
$gw: $gutter-width; // Alias

// We set the column width equal to the gutter, and equal to the grid padding
$column-width: 4em; // The width of columns
$grid-padding: $gw; // The padding on the sides of the out <container>

// Note that Susy is always "fluid" for inner elements, the Susy Sass "API" emits percents
// but we additionally want the outer container to be fluid with the width of the browser.
$container-style: magic; // shrinks down but doesn't expand
$break-small: 12; // column breakpoint - at the equivalent of fullsize grid units
$break-medium: 24; // column breakpoint - at the equivalent of fullsize grid units

// The main <form> width is 
$form-width: $cw;
$fw: $form-width; //Alias

// Width: the main <label>s in the <form>
$label-width: half-of($fw);
$lw: $label-width; // Alias

$input-width: ($fw - $label-width);
$iw: $input-width; // Alias

// Typography for <form> elements
//
$form-helper-text-size: $small-font-size;

$notification-width: 5;

// random mixins used sitewide 

@mixin chunky-block() {
  @include reset-box-model;
  font-size: $large-font-size;
  padding: $gw;
  color: black(0.80);
  @include bb-transition($grey, white, '0.2s', 'color', ':hover');
  &:hover {
    color: black(0.50);
  }
}
