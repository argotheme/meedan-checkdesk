@mixin form-drag-and-drop() {
  .ui-droppable { 
    float: $from-direction; // it must be floated to contain droppable form elements.
    width: 100%; // ... thus this must be set since it must be floated. 
    padding: 0; //  ... thus we can have no padding
  }

  .ui-droppable.drop-hover textarea {
    background-color: rgba(green, 0.1);
    border-color: rgba(green, 0.3);
  }
}

// Form Actions (eg submit button)
//
@mixin form-actions($w) {

  .form-actions {
    @include span-columns($w, $w); // end of grid

    // Form actions: buttons and anchors
    input, a {
      @include checkdesk-button;
    }
  }

  // Grey buttons
  input#edit-reset, 
  input#edit-draft, 
  input[type="reset"] {
    @include checkdesk-button();
    border: 1px solid $grey;
  }

  // buttons
  input#edit-submit, 
  .form-submit {
    @include checkdesk-button($twitter-blueish);
  }
  

}

// In addition to our use of normalize, and other resets, 
// This standardizes form elements
//
@mixin form-standardize {
  
  label, input, button, select, textarea {
    font-size: $base-font-size;
  }

  input, button, select, textarea {
    font-family: $sans-font-family;
  }

  label {
    display: block;
  }

  select, textarea, input[type="text"], input[type="password"], input[type="datetime"], input[type="datetime-local"], input[type="date"], input[type="month"], input[type="time"], input[type="week"], input[type="number"], input[type="email"], input[type="url"], input[type="search"], input[type="tel"], input[type="color"], .uneditable-input {
    display: inline-block;
    line-height: $base-line-height;
    height: $base-line-height * $base-font-size;
    margin-bottom: ms(-2);
    color: $gray;
    @include border-radius(4px);
    vertical-align: middle;
  }

  // Everything else
  textarea, input[type="text"], input[type="password"], input[type="datetime"], input[type="datetime-local"], input[type="date"], input[type="month"], input[type="time"], input[type="week"], input[type="number"], input[type="email"], input[type="url"], input[type="search"], input[type="tel"], input[type="color"], .uneditable-input {
    background-color: $input-background;
    border: 1px solid $inputBorder;
    @include box-shadow(rgba($black, .075) 0 1px 1px inset);
    @include ctb-transition(#{border linear .2s, box-shadow linear .2s});

    // Focus state
    &:focus {
      border-color: rgba($facebook-blue,.8);
      outline: 0;
      outline: thin dotted \9; /* IE6-9 */
      // @include ctb-box-shadow(#{inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(82,168,236,.6)});
    }
  }

  // Position radios and checkboxes better
  input[type="radio"], input[type="checkbox"] {
    margin: ms(-2) 0 0;
    *margin-top: 0; /* IE7 */
    margin-top: 1px \9; /* IE8-9 */
    line-height: normal;
    cursor: pointer;
    & + label {
      margin: ms(-2) 0 0;
    }
  }

  // Reset width of input images, buttons, radios, checkboxes
  input[type="file"], input[type="image"], input[type="submit"], input[type="reset"], input[type="button"], input[type="radio"], input[type="checkbox"] {
    width: auto; // Override of generic input selector
  }

  // Make select elements obey height by applying a border
  select {
    width: 220px; // default input width + 10px of padding that doesn't get applied
    border: 1px solid $inputBorder;
    background-color: $input-background; // Chrome on Linux and Mobile Safari need background-color
    font-size: $small-font-size;
  }

  // Make multiple select elements height not fixed
  select[multiple], select[size] { height: auto; }

  // Focus for select, file, radio, and checkbox
  select:focus, input[type="file"]:focus, input[type="radio"]:focus, input[type="checkbox"]:focus {
    @include ctb-tab-focus();
  }
}

// ============================================================================
// The forms 
//
@mixin cd-form($w, $context, $gw: $gw) {
  form {
    @include form-standardize;
    @include form-actions($w);
    @include form-pass($w, $context);
    @include form-drag-and-drop;
    @include span-columns($w, $context, $gw);
    @content; // if you want to pass in padding via breakpoints

    & > .form-item {
      @include reset-box-model;
      @include span-columns($w, $w);
      clear: both;
      font-size: $small-font-size;
      color: $dark-grey;
      background: rgba($light-grey, 0.5);

      // Nested <.form-item>s
      .form-item { 
        @include span-columns($w, $w);
      }
    } 

    // Default inputs and textareas
    input,
    textarea {
      @include span-columns($w, $w, $gw/2); // small padding with grid accounting
      padding: { top: $gw/2; bottom: $gw/2; } // match the padding on top and bottom
      @include border-radius(3px);
      display: block;
      line-height: $base-line-height;
      background-color: $input-background;
      border: 1px solid $grey;
      margin-top: $gw;

      // Focus state
      &:focus {
        border-color: rgba(black, .5);
        outline: thin dotted $light-grey;
      }
    }

    textarea {
      height: 100px; // starting height
    }

    // When we start writing make it bright
    input:focus, 
    textarea:focus { 
      background-color: white; 
    }

    // Default labels
    label {
      font-size: $large-font-size;
      display: block;
      font-weight: normal;
      padding { top: $gw; bottom: $gw; }

      &[for="edit-pass"] {
        a  {
          padding: $gw;
          font-size: $small-font-size;
          color: $grey;
          font-weight: normal;
        }
      }
    }


    // Default descriptions
    .description {
      clear: $from-direction;
      font-size: ms(-1);
      display: none; // displayed at larger breakpoints
      padding: 0.5em 0;
      color: rgba(black, 0.75);
    }

    // little links: create new account, forgot password 
    // BAD selector here
    .item-list .first.last {
      font-size: $small-font-size;
    }

    // Confirmation Form Actions: Confirm delete node
    &.confirmation {
      .form-actions input {
          @include checkdesk-button($firetruck-red); // Red delete button
      }
    }
    
    // checkboxes and radios
    input[type="checkbox"], 
    input[type="radio"] {
      width: $checkbox-width;
      display: inline-block;
      clear: both;
      float: $from-direction;
    } 

    // Checkbox labels for checkboxes and radios, aka ".options"
    label.option {
      @include reset-box-model; // reset default label styles
      display: inline-block;
      font-size: $smaller-font-size;
      cursor: pointer;
      float: $from-direction;
      clear: none;
    }

    div.form-wrapper {
      @include span-columns($w, $w);
    }
  }
}

// ======================================================================
// Forms Breakpoints

// Default render of the forms
@include cd-form($cw, $cw, $gw);

// Breakpoint: small
@include at-breakpoint($break-small) {
  $break: $break-small;
  @include cd-form($break - 6, $break) {
    @include pad(3, 3, $break); // more padding
    .description {
      display: inline-block; // appears
      padding: $base-font-size;
    }
  }
}

// Breakpoint: medium
@include at-breakpoint($break-medium) {
  $break: $break-medium;
}

// Breakpoint: large
@include at-breakpoint($break-large) {
  $break: $break-large;
}