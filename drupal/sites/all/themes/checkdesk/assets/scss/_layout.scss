// Core layout
// 
// This is the basic "Skeleton" that drives the "core" layout. 
// All layout is expressed as a ratio using span-columns() + container().
// This allows us to more easily redefine the layout in different context. 
// We also combine this technique with media queries to resize based on browser width.
//
// Compatibility: untested

// Further Reading: 
// http://susy.oddbird.net/guides/reference/#ref-responsive

body {

  #page {
    // The all-powerful container() mixin
    // 
    // The container sets the ratio for all other calculations.
    // You should not need to set $container again, but you can.
    // Requires a mathematically sensible $container-width aka $cw (whole integers, usually even).
    // 
    //$cw - the width of the outer width in columns, usually 12 or 24
    @include container($cw);
    // @include susy-grid-background;
    margin-top: $gw * 6;
  }

  #content-inner {
    // The use of squish is accounted for in $center-column-width
    @include span-columns($center-column-width, $cw, $gw);

    // $center-column-width has a twelveth-of $container-width on either side
    @include squish(twelveth-of($cw),twelveth-of($cw),$cw);
  }

  // Debugger
  // @include debug_breakpoints;

  // =====
  // breakpoint: 1
  // Applies to everything
  @include at-breakpoint(1) {
    div.column.center {
      // @include checkdesk-form-basics($fw, $center-column-width);
      // @include checkdesk-form-item($fw, $center-column-width);
    }
  }
  
  // =====
  // breakpoint: small
  // Applies to everything larger than a <min-width:> value
  @include at-breakpoint($break-small) {
  }

  // =====
  // breakpoint: medium
  // Applies to everything larger than an even larger <min-width:> value
  @include at-breakpoint($break-medium) {
  }
}