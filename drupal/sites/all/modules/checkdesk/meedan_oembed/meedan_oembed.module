<?php


/**
 * Implements of hook_element_info_alter().
 */
function meedan_oembed_element_info_alter(&$type) {
  $type['oembed']['#pre_render'][0] = 'meedan_oembed_pre_render_fetch';
  $type['oembed_bare']['#pre_render'][0] = 'meedan_oembed_pre_render_fetch';
  $type['oembed_thumbnail']['#pre_render'][1] = 'meedan_oembed_pre_render_fetch';
}

/**
 * clone this function from oembedcore
 * and handle empty oembed case
 * Pre render fetches the oEmbed data.
 *
 */
function meedan_oembed_pre_render_fetch($element) {
  $embed = oembedcore_oembed_data($element['#url'], $element['#options']);
  // handle rendering if the response is bad.
  if (!$embed) {
    $element['#embed'] = meedan_oembed_data($element['#url'], $element['#options']);
  }
  else {
    $element['#embed'] = $embed;
  }

  // Recalculate cache expire time based on response.
  if (isset($embed->cache_age) && $element['#cache']['expire'] != CACHE_PERMANENT) {
    $expire = REQUEST_TIME + intval($embed->cache_age);
    if ($expire > $element['#cache']['expire']) {
      $element['#cache']['expire'] = $expire;
    }
  }
  return $element;
}

/**
 * Fetch data for an embeddable URL.
 *
 * @param string $url
 *   An external URL for the content to embed.
 * @param array $attributes
 *   An associative array of attributes, with the following keys:
 *   - 'maxwidth'
 *       The maximum width of the embed, in pixels.
 *   - 'maxheight'
 *       The maximum height of the embed, in pixels.
 * @return
 *   an object representing the embeddable data of the URL.
 */
function meedan_oembed_data($url, $attributes = array()) {
  $matches = array();
  $attributes = array_filter($attributes);
  $attributes['key'] = variable_get('oembedembedly_api_key', NULL);
  $provider = array();
  $domain = _meedan_oembed_get_domain_name($url);
  $provider['endpoint'] = 'http://api.embed.ly/1/oembed'; 
  //set provider name specific to domain name to use it on #theme function
  $callback = 'meedan_oembed_theme_' . $domain;
  if (function_exists($callback)) {
    $callback($provider);
  }
  else {
    $provider['name'] = 'meedan_oembed_theme_generic'; 
  }
  $embed = oembedcore_oembed_fetch($provider, $url, $matches, $attributes);
  meedan_oembed_generic($embed, $domain);
  return $embed;
}

/**
 *
 */
function meedan_oembed_generic(&$embed, $domain) {
  //add data to embed object
  $url = $embed->url;
  $stream_options = array(
    'http' => array(
      'timeout' => 5,      // Timeout in seconds
      'max_redirects' => 2,
      'user_agent' => 'Drupal (+http://drupal.org/)',
    )
  );
  stream_context_set_default($stream_options);
  $check_url = preg_match('/^(http|https):\/\//', $url);
  $check_url = (!$check_url) ? 'http://' .$url : $url;
  // disable get_headers until fix invalid url warning 
  //$header = get_headers($url, 1);
  //$url_type = (is_array($header['Content-Type'])) ? $header['Content-Type'][0] : $header['Content-Type'];
  if (TRUE/*preg_match('/text\/html/', $url_type)*/) {
    require_once(libraries_get_path('simplehtmldom') . '/simple_html_dom.php');
    $context = stream_context_create($stream_options);
    $html = file_get_html($url, FALSE, $context);
    if (is_object($html)) {
      // Get favicon.
      $favicons = $html->find('link[rel=shortcut icon]', NULL, TRUE);
      if (count($favicons)) {
        $favicon = $favicons[0]->href;
        //check if favicon is relative url as parse_url did not work with relatvie URL
        $favicon_url = preg_match('/^(http|https):\/\//', $favicon); 
        $favicon = (!$favicon_url) ? $embed->provider_url .'/' . $favicon : $favicon; 
        $host = parse_url($favicon, PHP_URL_HOST);
        if (empty($host)) {
          $favicon = NULL;
        }
      }
      if (empty($favicon)) {
        $host = parse_url($url, PHP_URL_HOST);
        $favicon = url('http://www.google.com/s2/favicons', array('query' => array('domain' => $host), 'absolute' => TRUE));
      }
      $embed->favicon_link = $favicon;
      $callback = 'meedan_oembed_' . $domain;
      if (function_exists($callback)) {
        $callback($embed, $html);
      }
    }
  }
}

/**
 *
 */
function meedan_oembed_facebook(&$embed, $html) {
  // Extract message.
  foreach ($html->find('div[class=mts]') as $todelete) {
    $todelete->outertext = '';
  }
  // Extract author info.
  $author_block = $html->find('div[class=fbStreamPermalinkHeader]', 0);
  $author_link = $author_block->find('div[class=UIImageBlock_Content] div a', 0);
  $embed->author_name = $author_link->innertext;
  $embed->author_url = $author_link->href;
}


/**
 *
 */
function meedan_oembed_theme_facebook(&$provider) {
  $provider['name'] = 'meedan_oembed_theme_facebook'; 
}

/**
 * Get domain name from url.
 * Get site name.
 * Choose largest token of the host.
 */
function _meedan_oembed_get_domain_name($url) {
  $parts = explode('.', parse_url($url, PHP_URL_HOST));
  $domain = '';
  foreach ($parts as $part) {
    if (strlen($part) > strlen($domain)) {
      $domain = $part;
    }
  }
  return strtolower($domain);
}

/**
 * Implementation of hook_theme().
 */
function meedan_oembed_theme() {
  $path = drupal_get_path('module', 'meedan_oembed') . '/theme';
  return array(
    'oembed__link__meedan_oembed_theme_generic' => array(
      'variables' => array('embed' => NULL), 
      'template' => 'oembed-generic',
      'path' => $path,
    ),  
    'oembed__link__meedan_oembed_theme_facebook' => array(
      'variables' => array('embed' => NULL),  
      'template' => 'oembed-facebook',
      'path' => $path,
    ),
  );
}


function template_preprocess_oembed__link__meedan_oembed_theme_facebook (&$vars) {
  $embed = $vars['embed'];
  $vars['author_img'] = l(theme('image', array('path' => $embed->thumbnail_url)), $embed->author_url, array('html' => TRUE));
  $vars['author_name'] = l($embed->author_name, $embed->author_url);
  $vars['content'] = $embed->description;
  $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
}

function template_preprocess_oembed__link__meedan_oembed_theme_generic(&$vars) {
  $embed = $vars['embed'];
  $vars['favicon_link'] = l(theme('image', array('path' => $embed->favicon_link)), $embed->provider_url, array('html' => TRUE));
  $vars['title_link'] = l($embed->title, $embed->url);
  $vars['content'] = $embed->description;
  $vars['thumbnail'] = l(theme('image', array('path' => $embed->thumbnail_url)), $embed->url, array('html' => TRUE));
  $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
}

/**
 * Function to extract title using embdly.
 * ToDO : should depend on oembed module to get this info
 */
function meedan_oembed_get_title($url) {
  $attributes = array();
  $attributes['url'] = $url;
  $attributes['key'] = variable_get('oembedembedly_api_key', NULL);
  $endpoint = 'http://api.embed.ly/1/oembed'; 
  $query = http_build_query($attributes, NULL, '&');
  $fetch_url = $endpoint . '?' . $query;
  $response = drupal_http_request($fetch_url);
  $title = NULL;
  if (!isset($response->error)) {
    $embed = json_decode($response->data);
    if (isset($embed->title)) {
      $title = $embed->title;
    }
  }
  return $title;
}

/**
* Implements hook_entity_info_alter().
*/
function meedan_oembed_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['meedan_oembed'] = array(
    'label' => t('Meedan Oembed'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_filter_info().
 */
function meedan_oembed_filter_info() {
  $filters['filter_meedan_oembed'] = array(
    'title' => t('Meedan Oembed Filter'),
    'description' => t('Every instance of meedan oembed nid [nid:$nid] will be replaced with the current meedan oembed node view.'),
    'prepare callback' => '_meedan_oembed_filter_prepare',
    'process callback' => '_meedan_oembed_filter_process',
    'tips callback' => '_meedan_oembed_filter_tips',
  );
  return $filters;
}

/**
 * Meedan Oembed filter prepare callback.
 */
function _meedan_oembed_filter_prepare($text, $filter) {
  return $text;
}

/**
 * Time filter process callback.
 *
 * Now, in the "process" step, we'll search for our escaped time tags and
 * do the real filtering: replace nid with meedan oembed node view.
 */
function _meedan_oembed_filter_process($text, $filter) {
  $matches = array();
  preg_match_all('@\[nid:([0-9]+)\]@', $text, $matches);
  if (count($matches[1])) {
    $output = array();
    foreach($matches[1] as $key => $nid) {
      if (is_numeric($nid)) {
        $node = node_load($nid);
        if(is_object($node)) {
          //render node using custom Meedan Oembed view
          $node_view = drupal_render(node_view($node, 'meedan_oembed'));
          //replace [nid:$nid] with meedan oembed node view
          $text = str_replace( $matches[0][$key], '<em>' . $node_view . '</em>', $text);
        }
      }
    }
  }
  return $text;
}


/**
 * Filter tips callback for meedan oembed filter.
 *
 */
function _meedan_oembed_filter_tips($filter, $format, $long = FALSE) {
  return t('<em>[nid:$nid]</em> is replaced with the meedan oembed node view for $nid.');
}

