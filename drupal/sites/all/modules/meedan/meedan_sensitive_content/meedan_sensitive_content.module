<?php

define('MEEDAN_SENSITIVE_CONTENT_DEFAULT_TEXT', 'This media contains graphic imagery which may be considered offensive.');

/**
 * API function to determine whether content is marked as sensitive.
 */
function meedan_sensitive_content_is_flagged($node) {
  $flag_name = variable_get('meedan_sensitive_content_flag', '');
  $flag = flag_get_flag($flag_name);
  if (!$flag) {
    watchdog('meedan', 'Flag "@flag" not found for sensitive content.', array('@flag' => $flag_name), WATCHDOG_WARNING);
    return FALSE;
  }
  return $flag->is_flagged($node->nid);
}

/**
 * Implements hook_menu().
 */
function meedan_sensitive_content_menu() {
  $items = array();

  $items['admin/config/content/sensitive'] = array(
    'title' => 'Sensitive content',
    'description' => 'Manage how sensitive content should be displayed to users.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meedan_sensitive_content_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Menu function for `admin/config/content/sensitive`.
 */
function meedan_sensitive_content_settings() {
  $flags = array();
  foreach (flag_get_flags() as $fid => $flag) {
    $flags[$flag->name] = $flag->title;
  }
  $form['meedan_sensitive_content_flag'] = array(
    '#type' => 'select',
    '#options' => $flags,
    '#default_value' => variable_get('meedan_sensitive_content_flag'),
    '#title' => t('Flag'),
    '#description' => t('The flag that is associated with the sensitive content.'),
  );
  $fields = array();
  foreach (field_info_field_map() as $field_name => $field) {
    $fields[$field_name] = $field_name;
  }
  $form['meedan_sensitive_content_fields'] = array(
    '#type' => 'checkboxes',
    '#options' => $fields,
    '#default_value' => variable_get('meedan_sensitive_content_fields', array()),
    '#title' => t('Fields'),
    '#description' => t('Which fields can have sensitive content.'),
  );
  $form['meedan_sensitive_content_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Warning text'),
    '#description' => t('The warning text that will be displayed for sensitive content.'),
    '#default_value' => variable_get('meedan_sensitive_content_text', MEEDAN_SENSITIVE_CONTENT_DEFAULT_TEXT),
  );
  return system_settings_form($form);
}

/**
 * Implements of hook_node_view().
 */
function meedan_sensitive_content_node_view($node, $view_mode, $langcode) {
  $fields = variable_get('meedan_sensitive_content_fields', array());
  foreach ($fields as $field) {
    meedan_sensitive_content_data($node->content[$field], $node->nid);
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter() for `user_profile_form`.
 */
function meedan_sensitive_content_form_user_profile_form_alter(&$form, $form_state) {
  global $user;
  $default_value = FALSE;
  if (isset($user->data['sensitive_content']) && $user->data['sensitive_content']) {
    $default_value = TRUE;
  }

  $form['sensitive_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('View sensitive content without displaying a warning.'),
    '#default_value' => $default_value,
    '#weight' => 0,
  );
}

/**
 * Implements hook_user_presave().
 */
function meedan_sensitive_content_user_presave(&$edit, $account, $category) {
  if (isset($edit['sensitive_content'])) {
    $edit['data']['sensitive_content'] = $edit['sensitive_content'];
  }
}

/**
 * Implements of hook_theme().
 */
function meedan_sensitive_content_theme() {
  $path = drupal_get_path('module', 'meedan_sensitive_content') . '/theme';
  return array(
    'meedan_sensitive_content_display' => array(
      'variables' => array('meedan_sensitive_nid' => NULL), 
      'template' => 'meedan-sensitive',
      'path' => $path,
    ),  
  );
}

/**
 * Template preprocessor for `meedan_sensitive_content_display`.
 */
function template_preprocess_meedan_sensitive_content_display(&$vars) {
  $vars['meedan_sensitive_text'] = t(variable_get('meedan_sensitive_content_text', MEEDAN_SENSITIVE_CONTENT_DEFAULT_TEXT));
  $vars['meedan_sensitive_link'] = l(t('Display'), '', array('attributes' => array('class' => 'display-sensitive', 'onclick' => 'meedanSensitiveContent.Update('. $vars['meedan_sensitive_nid'] .', true); return false;')));
}

function meedan_sensitive_content_preprocess_views_view_fields(&$vars) {
  $view = $vars['view'];
  if (isset($vars['fields'])) {
    $fields = variable_get('meedan_sensitive_content_fields', array());
    foreach ($fields as $field_name) {
      if (isset($vars['fields'][$field_name])) {
        $field = $vars['fields'][$field_name];
        $content = $field->content;
        meedan_sensitive_content_data($content, $field->raw);
        $vars['fields'][$field_name]->content = render($content);
      }
    }
  }
}

/**
 * Return a renderable array for sensitive content
 */
function meedan_sensitive_content_data(&$content, $nid) {
  global $user;
  $node = node_load($nid);
  $display_sensitive = TRUE;
  
  if (isset($user->data['sensitive_content']) && $user->data['sensitive_content']) {
    $display_sensitive = FALSE;
  }
  
  if ($display_sensitive && meedan_sensitive_content_is_flagged($node)) {

    if (!is_array($content)) {
      $content = array('#markup' => $content);
    }

    $sensitive = array(
      '#markup' => t(variable_get('meedan_sensitive_content_text', MEEDAN_SENSITIVE_CONTENT_DEFAULT_TEXT)),
      '#meedan_sensitive_nid' => $node->nid,
      '#theme' => 'meedan_sensitive_content_display',
      '#attached' => array( 
        'js' => array(
          drupal_get_path('module', 'meedan_sensitive_content') . '/js/meedan_sensitive_content.js',
          array('data' => array('meedanSensitiveContent' => array('flag' => variable_get('meedan_sensitive_content_flag', ''))), 'type' => 'setting'),
        ),
        'css' => array(
          drupal_get_path('module', 'meedan_sensitive_content') . '/css/meedan_sensitive_content.css',
        ),
      ),
    );

    $content['#prefix'] = '<div class="sensitive-hide sensitive-item-'. $node->nid .'" data-nid="' . $node->nid . '">';
    $content['#suffix'] = '</div>' . render($sensitive);
  }
}
