<?php

/**
 * Implements hook_node_load().
 */
function meedan_oembed_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    if ($node->type != 'media') {
      continue;
    }
    if (!isset($node->field_link) || !isset($node->field_link[LANGUAGE_NONE]) || !isset($node->field_link[LANGUAGE_NONE][0])) {
      continue;
    }

    $nodes[$nid]->embed = meedan_oembed_data($node->field_link[LANGUAGE_NONE][0]['url']);
  }
}

/**
 * Implements of hook_element_info_alter().
 */
function meedan_oembed_element_info_alter(&$type) {
  // Override oEmbed's pre_render hooks with ours.
  foreach (array('oembed', 'oembed_bare', 'oembed_thumbnail') as $key) {
    foreach ($type[$key]['#pre_render'] as &$pre_render) {
      if ($pre_render == 'oembedcore_pre_render_fetch') {
        $pre_render = 'meedan_oembed_pre_render_fetch';
      }
    }
  }
}

/**
 * Pre render fetches the oEmbed data.
 * Copy of oembedcore_pre_render_fetch with meedan_oembed_data() called instead of oembedcore_oembed_data().
 */
function meedan_oembed_pre_render_fetch($element) {
  $embed = meedan_oembed_data($element['#url'], $element['#options']);

  // Prevent rendering if the response is bad.
  if (!$embed) {
    $element['#printed'] = TRUE;
    return $element;
  }

  $element['#embed'] = $embed;

  // Recalculate cache expire time based on response.
  if (isset($embed->cache_age) && $element['#cache']['expire'] != CACHE_PERMANENT) {
    $expire = REQUEST_TIME + intval($embed->cache_age);
    if ($expire > $element['#cache']['expire']) {
      $element['#cache']['expire'] = $expire;
    }
  }

  return $element;
}

/**
 * Returns the hook_meedan_oembed() handler information for a given domain.
 */
function meedan_oembed_get_handler_for_domain($domain) {
  $handlers = module_invoke_all('meedan_oembed');

  if (array_key_exists($domain, $handlers)) {
    return $handlers[$domain];
  }

  return FALSE;
}

/**
 * Fetch data for an embeddable URL.
 *
 * All request data is cached (even if error).
 *
 * Oembed sequence
 *   1. Hit cache
 *   2. Call custom scrape function if exist
 *   3. Ask oEmbed core to render for us
 *   4. Call Embedly
 *
 * @param string $url
 *   An external URL for the content to embed.
 * @param array $attributes
 *   An associative array of attributes, with the following keys:
 *   - 'maxwidth'
 *       The maximum width of the embed, in pixels.
 *   - 'maxheight'
 *       The maximum height of the embed, in pixels.
 * @param boolean $retry_if_error
 *   Whether the media should be reparsed if an error happened. Defaults to FALSE.
 * @param boolean $no_cache
 *   Optional, when set to TRUE the cache will be ignored AND reset for this
 *   oembed response.
 * @return
 *   an object representing the embeddable data of the URL.
 */
function meedan_oembed_data($url, $attributes = array(), $retry_if_error = FALSE, $no_cache = FALSE) {
  $provider = array();
  $provider['endpoint'] = 'http://api.embed.ly/1/oembed';

  // Set provider name specific to domain name to use it on #theme function
  $domain  = _meedan_oembed_get_domain_name($url);
  $handler = meedan_oembed_get_handler_for_domain($domain);

  if ($handler && isset($handler['provider_name'])) {
    $provider['name'] = $handler['provider_name'];
  }
  else if (function_exists('template_preprocess_oembed__link__meedan_oembed_' . $domain)) {
    $provider['name'] = 'meedan_oembed_' . $domain;
  }
  else {
    $provider['name'] = 'meedan_oembed_generic';
  }

  $attributes = array_filter($attributes);
  $attributes['key'] = variable_get('oembedembedly_api_key', NULL);

  $element = oembedcore_render_cache('oembed_request', $url, $attributes);

  $cache_key = implode(':', $element['#cache']['keys']);
  $cache     = cache_get($cache_key, $element['#cache']['bin']);

  $embed = FALSE;

  if (!$no_cache && $cache && isset($cache->data) && (!isset($cache->data->error) || !$cache->data->error || !$retry_if_error)) {
    $embed = $cache->data;
    $embed->original_url = $url;
    $embed->provider = $provider;
    return $embed;
  }

  // Call scrape function first if exist
  if ($handler && function_exists($handler['callback'])) {
    $embed = $handler['callback']($provider, $url);
  }

  if (!$embed || ($embed->error && $embed->try_embedly)) {
    $original_embed = $embed;

    // Ask oEmbed core to render for us
    if ($embed = oembedcore_oembed_data($url, $attributes)) {
      // Nothing to do
    }
    // Call Embedly
    else {
      $matches = array();
      $embed = oembedcore_oembed_fetch($provider, $url, $matches, $attributes);
    }

    // In the case where Embedly was used as a fallback the first error message
    // from the $handler['callback'] is likely more accurate. Use it instead.
    if ($embed->error && $original_embed->error && $original_embed->error_message) {
      $embed->error_message = $original_embed->error_message;
    }
  }

  if (!$embed || (isset($embed->error) && $embed->error)) {
    $url_info = parse_url($url);

    // Ensure NULL and FALSE become (object) array()
    $embed = (object) $embed;

    $embed->url           = $url;
    $embed->error         = TRUE;
    $embed->original_url  = $url;
    $embed->provider_name = '';
    $embed->provider_url  = $url_info['scheme'] . '://' . $url_info['host'];
    $embed->thumbnail_url = url(drupal_get_path('module', 'meedan_oembed') . '/theme/thumbnail.png', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE)));
  }
  else {
    meedan_oembed_add_extra_information($embed);
    $embed->error = FALSE;
  }

  // Clear cached markup as well
  $template = oembedcore_render_cache('oembed', $url);

  // Set the result to cache, even if error
  cache_clear_all(implode(':', $template['#cache']['keys']), $template['#cache']['bin'], TRUE);
  cache_set($cache_key, $embed, $element['#cache']['bin'], $element['#cache']['expire']);

  return $embed;
}

/**
 * Scrape page to extract oEmbed-relevent information.
 */
function meedan_oembed_add_extra_information(&$embed) {
  //Use google getFavicon service http://getfavicon.appspot.com/
  $embed->favicon_link = url('http://g.etfv.co/'. $embed->original_url, array('absolute' => TRUE));
  // TODO Get thumbnail.
  if (empty($embed->thumbnail_url)) {
    $embed->thumbnail_url = url(drupal_get_path('module', 'meedan_oembed') . '/theme/thumbnail.png', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE)));
  }
}

/**
 * Get domain name from url.
 * Get site name.
 * Choose largest token of the host.
 */
function _meedan_oembed_get_domain_name($url) {
  $parts = explode('.', parse_url($url, PHP_URL_HOST));
  $domain = '';
  foreach ($parts as $part) {
    if (strlen($part) > strlen($domain)) {
      $domain = $part;
    }
  }
  return strtolower($domain);
}

/**
 * Implementation of hook_theme().
 */
function meedan_oembed_theme() {
  $path = drupal_get_path('module', 'meedan_oembed') . '/theme';
  return array(
    'oembed__link__meedan_oembed_generic' => array(
      'variables' => array('embed' => NULL),
      'template' => 'oembed-generic',
      'path' => $path,
    ),
    'meedan_oembed_missing' => array(
      'variables' => array('media' => NULL),
      'template' => 'oembed-missing',
      'path' => $path,
    ),
  );
}

/**
 * Template preprocessor for 'oembed_link' with provider 'meedan_oembed_generic'.
 */
function template_preprocess_oembed__link__meedan_oembed_generic(&$vars) {
  $embed = $vars['embed'];
  $vars['favicon_link'] = l(theme('image', array('path' => $embed->favicon_link)), $embed->provider_url, array('html' => TRUE));
  $vars['title_link'] = l($embed->title, $embed->url);
  $vars['content'] = $embed->description;
  $vars['thumbnail'] = l(theme('image', array('path' => $embed->thumbnail_url)), $embed->url, array('html' => TRUE));
  $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
}

/**
 * Implements hook_entity_info_alter().
 */
function meedan_oembed_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['meedan_oembed'] = array(
    'label' => t('Meedan oEmbed'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_filter_info().
 */
function meedan_oembed_filter_info() {
  $filters['filter_meedan_oembed'] = array(
    'title' => t('Meedan oEmbed filter'),
    'description' => t('Every instance of [media-title:$nid] will be replaced with the corresponding Meedan oEmbed node view.'),
    'prepare callback' => '_meedan_oembed_filter_prepare',
    'process callback' => '_meedan_oembed_filter_process',
    'tips callback' => '_meedan_oembed_filter_tips',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Meedan oEmbed filter prepare callback.
 */
function _meedan_oembed_filter_prepare($text, $filter) {
  return $text;
}

/**
 * Time filter process callback.
 *
 * Now, in the "process" step, we'll search for our escaped time tags and
 * do the real filtering: replace nid with meedan oembed node view.
 */
function _meedan_oembed_filter_process($text, $filter) {
  $matches = array();
  preg_match_all('/\[\S+:(\d+)\]/u', $text, $matches);
  if (count($matches[1])) {
    $output = array();
    foreach ($matches[1] as $key => $nid) {
      if (is_numeric($nid)) {
        $node = node_load($nid);
        if (is_object($node)) {
          // Render node using custom Meedan oEmbed view.
          $element = node_view($node, 'meedan_oembed');
          $element['comments'] = comment_node_page_additions($node);
          $node_view = drupal_render($element);
          // Replace [media-title:$nid] with node view.
          $text = str_replace($matches[0][$key], $node_view, $text);
        }
        else {
          $missing = theme('meedan_oembed_missing', array('media' => $matches[0][$key]));
          $text = str_replace($matches[0][$key], $missing, $text);
        }
      }
    }
  }
  return $text;
}

/**
 * Filter tips callback for meedan oembed filter.
 *
 */
function _meedan_oembed_filter_tips($filter, $format, $long = FALSE) {
  return t('<em>[media-title:$nid]</em> is replaced with the Meedan oEmbed node view for <em>$nid</em>.');
}

/**
 * Implements of hook_node_presave();
 */
function meedan_oembed_node_presave($node) {
  if ($node->type == 'media') {
    //Set report type
    $embed = meedan_oembed_data($node->field_link[LANGUAGE_NONE][0]['url'], array(), TRUE);
    $node->status = ((isset($embed->error) && $embed->error) ? 0 : 1);
    if (!empty($embed->title)) {
      $node->title = substr($embed->title, 0, 255);
    }
    else {
      $node->title = t('report-!user-!datetime', array('!user' => $node->name, '!datetime' => date('U', $node->created)));
    }
  }
}

/**
 * Overwrite oembed template
 * add favicon and domain link.
 */
function meedan_oembed_preprocess_oembed(&$vars, $hook) {
  $embed = $vars['embed'];
  if ($embed) {

    $vars['original_url'] = $embed->original_url;

    $vars['classes_array'][] = 'oembed-'. $embed->type;
    $vars['title_attributes_array']['class'] = 'oembed-title';
    $vars['content_attributes_array']['class'] = 'oembed-content';

    // oEmbed links render using core link theme unless other preprocess
    // functions suggest other hooks.
    if ($embed->type == 'link') {
      $vars['title_attributes_array']['class'] .= ' oembed-link';

      $vars['theme_hook_suggestions'][] = 'link';
      $vars['path'] = $embed->original_url;
      $vars['text'] = $embed->title;
      $vars['options'] = array(
        'absolute' => TRUE,
        'attributes' => $vars['title_attributes_array'],
        'html' => TRUE,
      );
    }
    $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
    $vars['favicon_link'] = l(theme('image', array('path' => $embed->favicon_link)), $embed->provider_url, array('html' => TRUE));
    if ($embed->error) $vars['embed_error'] = t('It was not possible to parse this report.');
  }
}

/**
 * Any string beginning with at least one Arabic character is deemed
 * to be Arabic.
 */
function meedan_oembed_needs_rtl($text) {
  return (boolean) preg_match('/^\p{Arabic}/u', $text);
}
