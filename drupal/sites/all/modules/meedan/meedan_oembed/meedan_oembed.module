<?php

/**
 * Implements of hook_element_info_alter().
 */
function meedan_oembed_element_info_alter(&$type) {
  // Override oEmbed's pre_render hooks with ours.
  foreach (array('oembed', 'oembed_bare', 'oembed_thumbnail') as $key) {
    foreach ($type[$key]['#pre_render'] as &$pre_render) {
      if ($pre_render == 'oembedcore_pre_render_fetch') {
        $pre_render = 'meedan_oembed_pre_render_fetch';
      }
    }
  }
}

/**
 * Pre render fetches the oEmbed data.
 * Copy of oembedcore_pre_render_fetch with meedan_oembed_data() called instead of oembedcore_oembed_data().
 */
function meedan_oembed_pre_render_fetch($element) {
  $embed = meedan_oembed_data($element['#url'], $element['#options']);

  // Prevent rendering if the response is bad.
  if (!$embed) {
    $element['#printed'] = TRUE;
    return $element;
  }

  $element['#embed'] = $embed;

  // Recalculate cache expire time based on response.
  if (isset($embed->cache_age) && $element['#cache']['expire'] != CACHE_PERMANENT) {
    $expire = REQUEST_TIME + intval($embed->cache_age);
    if ($expire > $element['#cache']['expire']) {
      $element['#cache']['expire'] = $expire;
    }
  }

  return $element;
}

/**
 * Fetch data for an embeddable URL.
 *
 * @param string $url
 *   An external URL for the content to embed.
 * @param array $attributes
 *   An associative array of attributes, with the following keys:
 *   - 'maxwidth'
 *       The maximum width of the embed, in pixels.
 *   - 'maxheight'
 *       The maximum height of the embed, in pixels.
 * @return
 *   an object representing the embeddable data of the URL.
 */
function meedan_oembed_data($url, $attributes = array()) {
  //Oembed sequence
  //1- Hit cache
  //2- Call custom scrape function if exist.
  //3- Ask oEmbed core to render for us.
  //4- Call Embedly. 

  //1- Look in the oEmbed cache.
  $provider = array();
  $provider['endpoint'] = 'http://api.embed.ly/1/oembed'; 
  // Set provider name specific to domain name to use it on #theme function
  $domain = _meedan_oembed_get_domain_name($url);
  $callback = 'meedan_oembed_scrape_' . $domain;
  if (function_exists($callback)) {
    $provider['name'] = 'meedan_oembed_theme_' . $domain;
  }
  else {
    $provider['name'] = 'meedan_oembed_theme_generic'; 
  }
  $attributes = array_filter($attributes);
  $attributes['key'] = variable_get('oembedembedly_api_key', NULL);
  $element = oembedcore_render_cache('oembed_request', $url, $attributes);
  $cache_key = implode(':', $element['#cache']['keys']);
  $cache = cache_get($cache_key, $element['#cache']['bin']);
  if ($cache && isset($cache->data)) {
    $embed = $cache->data;
    $embed->original_url = $url;
    $embed->provider = $provider;
    return $embed;
  }

  //2- call scrape function first if exist.
  if (function_exists($callback)) {
    $embed = $callback($provider, $url);
  }
  //3- Ask oEmbed core to render for us.
  elseif ($embed = oembedcore_oembed_data($url, $attributes)) {
    //Nothing to do.
  }
  else {
    //4- Call Embedly.
    $matches = array();
    $embed = oembedcore_oembed_fetch($provider, $url, $matches, $attributes);
  }

  if (!$embed) {
    $url_info = parse_url($url);
    $embed = (object)array(
      'url' => $url,
      'original_url' => $url,
      'provider_url' => $url_info['scheme'] . '://' . $url_info['host'],
      'thumbnail_url' => url(drupal_get_path('module', 'meedan_oembed') . '/theme/thumbnail.png', array('absolute' => TRUE)),
    );
  }
  else {
    meedan_oembed_scrape_generic($embed);
    //cache embed
    cache_set($cache_key, $embed, $element['#cache']['bin'], $element['#cache']['expire']);
  }
  return $embed;
}

/**
 * Scrape page to extract oEmbed-relevent information.
 */
function meedan_oembed_scrape_generic(&$embed) {
  //Use google getFavicon service http://getfavicon.appspot.com/
  $embed->favicon_link = url('http://g.etfv.co/'. $embed->original_url, array('absolute' => TRUE));
  // TODO Get thumbnail.
  if (empty($embed->thumbnail_url)) {
    $embed->thumbnail_url = url(drupal_get_path('module', 'meedan_oembed') . '/theme/thumbnail.png', array('absolute' => TRUE));
  }
}

/**
 * Scrape Facebook post.
 */
function meedan_oembed_scrape_facebook($provider, $url) {
  include_once(libraries_get_path('facebook-php-sdk') . '/src/facebook.php');
  $url_info = parse_url($url);
  $provider_url = $url_info['scheme'] . '://' . $url_info['host'];
  $post_id = _meedan_oembed_getFacebookId($url);
  $facebook = new Facebook(array(
    'appId'  => variable_get('fboauth_id', ''),
    'secret' => variable_get('fboauth_secret', ''),
  ));
  $embed = NULL;
  try {
    $embed = new stdclass();
    $embed->url = $url;
    $embed->original_url = $url;
    $embed->provider = $provider;
    $embed->provider_url = $provider_url;
    $embed->provider_name = 'Facebook';
    $embed->type = 'link';
    $post_data = $facebook->api('/' . $post_id);
    //Get post message either from user message, link title or link description
    if (isset($post_data['message'])) {
      $embed->description = $post_data['message'];
      $embed->link_name = isset($post_data['name']) ? $post_data['name'] : '';
    }
    elseif (isset($post_data['name'])) {
      $embed->description = $post_data['name'];
    }
    elseif (isset($post_data['description'])) {
      $embed->description = $post_data['description'];
    }
    else {
      $embed->description = t('No message avilable for this post');
    }
    $embed->title = $embed->description;
    $embed->link = isset($post_data['link']) ? $post_data['link'] : '';
    $embed->picture = isset($post_data['picture']) ? $post_data['picture'] : '';
    $embed->link_description = isset($post_data['description']) ? $post_data['description'] : '';
    $embed->author_name = $post_data['from']['name'];
    $embed->author_url = $embed->provider_url . '/'. $post_data['from']['id'];
    $embed->author_img = 'https://graph.facebook.com/'. $post_data['from']['id'] .'/picture';

  } catch (FacebookApiException $e) {
    watchdog('FacebookApi', t('Unable to fetch data from facebook post - Unsupported get request @url', array('@url' => $url)));
  }
  return $embed;
}

/**
 * Scrape a tweet.
 */
function meedan_oembed_scrape_twitter($provider, $url) {
  preg_match('/^https?:\/\/(www\.)?twitter\.com\/([^\/]*)\/status\/([0-9]*)\/?$/', $url, $twitter_url);
  $profile = $twitter_url[2];
  $status = $twitter_url[3];
  $url_info = parse_url($url);
  $provider_url = $url_info['scheme'] . '://' . $url_info['host'];
  $embed = NULL;
  if (empty($profile) || empty($status)) {
    watchdog('TwitterAPI', t('No profile or status.'));
    return NULL;
  } else {
    $embed = new stdclass();
    $embed->url = $url;
    $embed->original_url = $url;
    $embed->favicon_link = url('http://g.etfv.co/'. $embed->original_url, array('absolute' => TRUE));
    $embed->provider = $provider;
    $embed->provider_url = $provider_url;
    $embed->provider_name = 'Twitter';
    $embed->type = 'link';
    $key = variable_get('twitter_consumer_key', '');
    $secret = variable_get('twitter_consumer_secret', '');
    $token = variable_get('twitter_token', '');
    $token_secret = variable_get('twitter_token_secret', '');
    if ($key == '' || $secret == '' || $token == '' || $token_secret == '') {
      watchdog('TwitterAPI', t('Please configure your Twitter OAuth settings.'));
    } else {
      $api_url = 'https://api.twitter.com/1.1/statuses/show/' . $status . '.json';
      $oauth_hash = 'oauth_consumer_key=' . $key . '&oauth_nonce=' . (time() + 5 * 3600) . '&oauth_signature_method=HMAC-SHA1&oauth_timestamp=' . (time() + 5 * 3600) . '&oauth_token=' . $token . '&oauth_version=1.0';
      $base = 'GET&' . rawurlencode($api_url) . '&' . rawurlencode($oauth_hash);
      $sigkey = rawurlencode($secret) . '&' . rawurlencode($token_secret);
      $signature = base64_encode(hash_hmac('sha1', $base, $sigkey, true));
      $signature = rawurlencode($signature);
      $oauth_header = 'oauth_consumer_key="' . $key . '", oauth_nonce="' . (time() + 5 * 3600) . '", oauth_signature="' . $signature . '", oauth_signature_method="HMAC-SHA1", oauth_timestamp="' . (time() + 5 * 3600) . '", oauth_token="' . $token . '", oauth_version="1.0", ';
      $curl_header = array("Authorization: Oauth {$oauth_header}", 'Expect:');
      $curl_request = curl_init();
      curl_setopt($curl_request, CURLOPT_HTTPHEADER, $curl_header);
      curl_setopt($curl_request, CURLOPT_HEADER, false);
      curl_setopt($curl_request, CURLOPT_URL, $api_url);
      curl_setopt($curl_request, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($curl_request, CURLOPT_SSL_VERIFYPEER, false);
      $json = curl_exec($curl_request);
      curl_close($curl_request);
      $data = json_decode($json);
      if (isset($data->errors)) {
        watchdog('TwitterAPI', t('Error from Twitter: ') . $data->errors[0]->message);
      } else {
        $text = $data->text;
        $embed->title = $text;
        $embed->description = $text;
        $embed->link = $url;
        $embed->link_description = $text;
        $embed->author_name = $data->user->name;
        $embed->author_url = 'http://twitter.com/' . $data->user->screen_name;
        $embed->author_img = $data->user->profile_image_url;
        $embed->thumbnail_url = $embed->author_img;
        $embed->picture = $embed->author_img;
        return $embed;
      }
    }
  }
  // If we got here, something went wrong with the API, let's try to parse the tweet manually
  try {
    include_once('lib/simplehtmldom_1_5/simple_html_dom.php');
    $html = file_get_html($url);
    if (is_object($html)) {
      $text = preg_replace('/&[^;]+;/i', '', trim(strip_tags($html->find('.tweet-text', 0)->innertext)));
      $embed->title = $text;
      $embed->description = $text;
      $embed->link = $url;
      $embed->link_description = $text;
      $embed->author_name = $html->find('strong.fullname', 0)->innertext;
      $embed->author_url = 'http://twitter.com/' . $html->find('span.js-action-profile-name b', 0)->innertext;
      $embed->author_img = $html->find('.js-action-profile-avatar', 0)->src;
      $embed->thumbnail_url = $embed->author_img;
      $embed->picture = $embed->author_img;
      return $embed;
    }
  } catch (Exception $e) {
    watchdog('TwitterAPI', t('Could not parse tweet manually: ') . $e->getMessage());
  }
  // Ok, give up!
  return NULL;
}

/**
 * Get domain name from url.
 * Get site name.
 * Choose largest token of the host.
 */
function _meedan_oembed_get_domain_name($url) {
  $parts = explode('.', parse_url($url, PHP_URL_HOST));
  $domain = '';
  foreach ($parts as $part) {
    if (strlen($part) > strlen($domain)) {
      $domain = $part;
    }
  }
  return strtolower($domain);
}

/**
 * Implementation of hook_theme().
 */
function meedan_oembed_theme() {
  $path = drupal_get_path('module', 'meedan_oembed') . '/theme';
  return array(
    'oembed__link__meedan_oembed_theme_generic' => array(
      'variables' => array('embed' => NULL), 
      'template' => 'oembed-generic',
      'path' => $path,
    ),  
    'oembed__link__meedan_oembed_theme_facebook' => array(
      'variables' => array('embed' => NULL),  
      'template' => 'oembed-facebook',
      'path' => $path,
    ),
    'meedan_oembed_missing' => array(
      'variables' => array('media' => NULL),
      'template' => 'oembed-missing',
      'path' => $path,
    ),
    'meedan_oembed_tweet' => array(
      'variables' => array('tweet' => NULL),
    ),
    'oembed__link__meedan_oembed_theme_twitter' => array(
      'variables' => array('embed' => NULL), 
      'template' => 'oembed-twitter',
      'path' => $path,
    ),
  );
}

/**
 * Template preprocessor for 'oembed_link' with provider 'meedan_oembed_theme_facebook'.
 */
function template_preprocess_oembed__link__meedan_oembed_theme_facebook (&$vars) {
  $embed = $vars['embed'];
  $vars['author_img'] = l(theme('image', array('path' => $embed->author_img)), $embed->author_url, array('html' => TRUE));
  $vars['author_name'] = l($embed->author_name, $embed->author_url);
  $vars['content'] = $embed->description;
  $vars['fb_picture']  = isset($embed->picture) ? theme('image', array('path' => $embed->picture)) : '';
  $vars['fb_link_title'] = isset($embed->link_name) ? $embed->link_name : '';
  $vars['fb_link_desc'] = isset($embed->link_description) ? $embed->link_description : '';
  $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
  $vars['favicon_link'] = l(theme('image', array('path' => $embed->favicon_link)), $embed->provider_url, array('html' => TRUE));
}

/**
 * Template preprocessor for 'oembed_link' with provider 'meedan_oembed_theme_generic'.
 */
function template_preprocess_oembed__link__meedan_oembed_theme_generic(&$vars) {
  $embed = $vars['embed'];
  $vars['favicon_link'] = l(theme('image', array('path' => $embed->favicon_link)), $embed->provider_url, array('html' => TRUE));
  $vars['title_link'] = l($embed->title, $embed->url);
  $vars['content'] = $embed->description;
  $vars['thumbnail'] = l(theme('image', array('path' => $embed->thumbnail_url)), $embed->url, array('html' => TRUE));
  $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
}

/**
 * Template preprocessor for 'oembed_link' with provider 'meedan_oembed_theme_twitter'.
 */
function template_preprocess_oembed__link__meedan_oembed_theme_twitter(&$vars) {
  $embed = $vars['embed'];
  $vars['favicon_link'] = l(theme('image', array('path' => $embed->favicon_link)), $embed->provider_url, array('html' => TRUE));
  $vars['content'] = $embed->description;
  $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
}

/**
* Implements hook_entity_info_alter().
*/
function meedan_oembed_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['meedan_oembed'] = array(
    'label' => t('Meedan oEmbed'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_filter_info().
 */
function meedan_oembed_filter_info() {
  $filters['filter_meedan_oembed'] = array(
    'title' => t('Meedan oEmbed filter'),
    'description' => t('Every instance of [media-title:$nid] will be replaced with the corresponding Meedan oEmbed node view.'),
    'prepare callback' => '_meedan_oembed_filter_prepare',
    'process callback' => '_meedan_oembed_filter_process',
    'tips callback' => '_meedan_oembed_filter_tips',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Meedan oEmbed filter prepare callback.
 */
function _meedan_oembed_filter_prepare($text, $filter) {
  return $text;
}

/**
 * Time filter process callback.
 *
 * Now, in the "process" step, we'll search for our escaped time tags and
 * do the real filtering: replace nid with meedan oembed node view.
 */
function _meedan_oembed_filter_process($text, $filter) {
  $matches = array();
  preg_match_all('/\[\S+:(\d+)\]/u', $text, $matches);
  if (count($matches[1])) {
    $output = array();
    foreach ($matches[1] as $key => $nid) {
      if (is_numeric($nid)) {
        $node = node_load($nid);
        if (is_object($node)) {
          // Render node using custom Meedan oEmbed view.
          $element = node_view($node, 'meedan_oembed');
          $node_view = drupal_render($element);
          // Replace [media-title:$nid] with node view.
          $text = str_replace($matches[0][$key], $node_view, $text);
        }
        else {
          $missing = theme('meedan_oembed_missing', array('media' => $matches[0][$key]));
          $text = str_replace($matches[0][$key], $missing, $text);
        }
      }
    }
  }
  return $text;
}

/**
 * Filter tips callback for meedan oembed filter.
 *
 */
function _meedan_oembed_filter_tips($filter, $format, $long = FALSE) {
  return t('<em>[media-title:$nid]</em> is replaced with the Meedan oEmbed node view for <em>$nid</em>.');
}

/**
 * Implements of hook_node_presave();
 */
function meedan_oembed_node_presave($node) {
  if ($node->type == 'media') {
    //Set report type
    $embed = meedan_oembed_data($node->field_link[LANGUAGE_NONE][0]['url']);
    if (isset($embed->title)) {
      $node->title = substr($embed->title, 0, 255);
    }
    else {
      $node->title = t('report-!user-!datetime', array('!user' => $node->name, '!datetime' => date('U', $node->created)));
    }
  }
}

/**
 * Implements of hook_form_FORM_ID_form().
 */
function meedan_oembed_form_media_node_form_alter(&$form, &$form_state, $form_id) {
  //Hide title field
  $form['title']['#type'] = 'value';
  $form['title']['#required'] = FALSE;
  include_once(libraries_get_path('facebook-php-sdk') . '/src/facebook.php');
  $facebook = new Facebook(array(
    'appId'  => variable_get('fboauth_id', ''),
    'secret' => variable_get('fboauth_secret', ''),
  ));
  //TODO: remove commented code to enable FB javascript sdk instead of current one.
  /**
  drupal_add_js("
    jQuery(document).ready(function () {
      window.fbAsyncInit = function() {
        FB.init({
          appId: '". $facebook->getAppID() ."',
          cookie: true,
          xfbml: true,
          oauth: true
        });
        FB.Event.subscribe('auth.login', function(response) {
          FB._oauth = false;
          FB.Cookie.setEnabled(true);
          FB.Auth.setSession(response.authResponse, response.status);
          FB._oauth = true;
          window.location.reload();
        });
        FB.Event.subscribe('auth.logout', function(response) {
          window.location.reload();
        });
      };
      (function() {
        var e = document.createElement('script'); e.async = true;
        e.src = document.location.protocol +
          '//connect.facebook.net/en_US/all.js';
        document.getElementById('fb-root').appendChild(e);
      }());
    });
    ", 'inline'
    );
   */
  // Get facebook User ID
  $fb_user = $facebook->getUser();
  if (!$fb_user) {
    $loginUrl = t('You should click <strong> !url </strong>if you want to add facebook media', array('!url' => l('here', $facebook->getLoginUrl(), array('attributes' => array('target' => '_blank')))));
    $form['facebook_login'] = array(
      '#markup' => $loginUrl,
      //'#markup' => '<fb:login-button></fb:login-button><div id="fb-root"></div>',
      '#weight' => -99,
    );
    $form['fb_loginurl'] = array(
      '#type' => 'hidden', 
      '#value' => $loginUrl,
    );
  }
  $form['fb_userid'] = array(
    '#type' => 'hidden', 
    '#value' => $fb_user,
  );
  $form['#validate'][] = '_meedan_oembed_facebook_post_validate';
}

/**
 * Validate embed from facebook 
 * make sure that user login through facebook if he adds media from facebook
 */
function _meedan_oembed_facebook_post_validate($form, &$form_state) {
  $lang = $form_state['values']['language'];
  $url = $form_state['values']['field_link'][$lang][0]['url'];
  $host = parse_url($url, PHP_URL_HOST);
  if (strpos($host, 'facebook.com')) {
    if (!$form_state['values']['fb_userid']) {
      //Ask user to login through facebook first
      form_set_error('field_link', $form_state['values']['fb_loginurl']);
    }
    else {
      //Check if user has a permission to embed this post
      include_once(libraries_get_path('facebook-php-sdk') . '/src/facebook.php');
      $facebook = new Facebook(array(
        'appId'  => variable_get('fboauth_id', ''),
        'secret' => variable_get('fboauth_secret', ''),
      ));
      $post_data = NULL;
      try {
        $id = _meedan_oembed_getFacebookId($url);
        $post_data = $facebook->api('/' . $id);
      } catch (FacebookApiException $e) {
        watchdog('FacebookApi', t('Unable to fetch data from facebook post - Unsupported get request @url', array('@url' => $url)));
      }
      if(!$post_data) {
        form_set_error('field_link', t('You have not enough permission to embed this post'));
      }
    }
  }
}

/**
 * Extract post id from URL
 */
function _meedan_oembed_getFacebookId($url) {
  //Check if this post is Timeline Photos
  $query = parse_url($url, PHP_URL_QUERY);
  parse_str(urldecode($query), $query);
  if (isset($query['fbid'])) {
    return $query['fbid'];
  }
  return substr(strrchr($url,'/'),1);
}

/**
 * Overwrite oembed template
 * add favicon and domain link.
 */
function meedan_oembed_preprocess_oembed(&$vars, $hook) {
  $embed = $vars['embed'];
  if ($embed) {

    $vars['original_url'] = $embed->original_url;

    $vars['classes_array'][] = 'oembed-'. $embed->type;
    $vars['title_attributes_array']['class'] = 'oembed-title';
    $vars['content_attributes_array']['class'] = 'oembed-content';

    // oEmbed links render using core link theme unless other preprocess
    // functions suggest other hooks.
    if ($embed->type == 'link') {
      $vars['title_attributes_array']['class'] .= ' oembed-link';

      $vars['theme_hook_suggestions'][] = 'link';
      $vars['path'] = $embed->original_url;
      $vars['text'] = $embed->title;
      $vars['options'] = array(
        'absolute' => TRUE,
        'attributes' => $vars['title_attributes_array'],
        'html' => TRUE,
      );
    }
    $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
    $vars['favicon_link'] = l(theme('image', array('path' => $embed->favicon_link)), $embed->provider_url, array('html' => TRUE));
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for `twitter_admin_form`.
 */
function meedan_oembed_form_twitter_admin_form_alter(&$form, &$form_state, $form_id) {
  $form['oauth']['twitter_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Access token'),
    '#description' => t('Used by meedan_oembed.'),
    '#default_value' => variable_get('twitter_token', NULL),
  );
  $form['oauth']['twitter_token_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Access token secret'),
    '#description' => t('Used by meedan_oembed.'),
    '#default_value' => variable_get('twitter_token_secret', NULL),
  );
}

function theme_meedan_oembed_tweet($variables) {
  $text = $variables['tweet'];
  $dir = ((preg_match('/\p{Arabic}/u', $text)) ? 'rtl' : 'ltr');
  return '<div class="tweet-preview tweet-preview-' . $dir . '">' . $text . '</div>';
}
