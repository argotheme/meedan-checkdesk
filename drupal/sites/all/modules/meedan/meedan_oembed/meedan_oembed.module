<?php

/**
 * Implements of hook_element_info_alter().
 */
function meedan_oembed_element_info_alter(&$type) {
  // Override oEmbed's pre_render hooks with ours.
  foreach (array('oembed', 'oembed_bare', 'oembed_thumbnail') as $key) {
    foreach ($type[$key]['#pre_render'] as &$pre_render) {
      if ($pre_render == 'oembedcore_pre_render_fetch') {
        $pre_render = 'meedan_oembed_pre_render_fetch';
      }
    }
  }
}

/**
 * Pre render fetches the oEmbed data.
 * Copy of oembedcore_pre_render_fetch with meedan_oembed_data() called instead of oembedcore_oembed_data().
 */
function meedan_oembed_pre_render_fetch($element) {
  $embed = meedan_oembed_data($element['#url'], $element['#options']);

  // Prevent rendering if the response is bad.
  if (!$embed) {
    $element['#printed'] = TRUE;
    return $element;
  }

  $element['#embed'] = $embed;

  // Recalculate cache expire time based on response.
  if (isset($embed->cache_age) && $element['#cache']['expire'] != CACHE_PERMANENT) {
    $expire = REQUEST_TIME + intval($embed->cache_age);
    if ($expire > $element['#cache']['expire']) {
      $element['#cache']['expire'] = $expire;
    }
  }

  return $element;
}

/**
 * Fetch data for an embeddable URL.
 *
 * @param string $url
 *   An external URL for the content to embed.
 * @param array $attributes
 *   An associative array of attributes, with the following keys:
 *   - 'maxwidth'
 *       The maximum width of the embed, in pixels.
 *   - 'maxheight'
 *       The maximum height of the embed, in pixels.
 * @return
 *   an object representing the embeddable data of the URL.
 */
function meedan_oembed_data($url, $attributes = array()) {
  // Ask oEmbed core to render for us.
  $embed = oembedcore_oembed_data($url, $attributes);
  if ($embed) {
    return $embed;
  }

  // Look in the oEmbed cache.
  $provider = array();
  $provider['endpoint'] = 'http://api.embed.ly/1/oembed'; 
  // Set provider name specific to domain name to use it on #theme function
  $domain = _meedan_oembed_get_domain_name($url);
  $callback = 'meedan_oembed_scrape_' . $domain;
  if (function_exists($callback)) {
    $provider['name'] = 'meedan_oembed_theme_' . $domain;
  }
  else {
    $provider['name'] = 'meedan_oembed_theme_generic'; 
  }
  $attributes = array_filter($attributes);
  $attributes['key'] = variable_get('oembedembedly_api_key', NULL);
  $element = oembedcore_render_cache('oembed_request', $url, $attributes);
  $cache_key = implode(':', $element['#cache']['keys']);
  $cache = cache_get($cache_key, $element['#cache']['bin']);
  if ($cache && isset($cache->data)) {
    $embed = $cache->data;
    $embed->original_url = $url;
    $embed->provider = $provider;
    return $embed;
  }

  // Call Embedly first, then scrape the page ourselves.
  $matches = array();
  $embed = oembedcore_oembed_fetch($provider, $url, $matches, $attributes);
  if (!$embed) {
    $embed = (object)array(
      'url' => $url,
      'provider_url' => 'http://' . parse_url($url, PHP_URL_HOST),
      'thumbnail_url' => url(drupal_get_path('module', 'meedan_oembed') . '/theme/thumbnail.png', array('absolute' => TRUE)),
    );
  }
  meedan_oembed_scrape_generic($embed, $domain);
  return $embed;
}

/**
 * Scrape page to extract oEmbed-relevent information.
 */
function meedan_oembed_scrape_generic(&$embed, $domain) {
  $url = $embed->url;
  $stream_options = array(
    'http' => array(
      'timeout' => 5,      // Timeout in seconds
      'max_redirects' => 2,
      'user_agent' => 'Drupal (+http://drupal.org/)',
    )
  );
  stream_context_set_default($stream_options);
  $check_url = preg_match('/^(http|https):\/\//', $url);
  $check_url = (!$check_url) ? 'http://' . $url : $url;
  // disable get_headers until fix invalid url warning 
  //$header = get_headers($url, 1);
  //$url_type = (is_array($header['Content-Type'])) ? $header['Content-Type'][0] : $header['Content-Type'];
  if (TRUE/*preg_match('/text\/html/', $url_type)*/) {
    require_once(libraries_get_path('simplehtmldom') . '/simple_html_dom.php');
    $context = stream_context_create($stream_options);
    $html = file_get_html($url, FALSE, $context);
    if (is_object($html)) {
      // Get favicon.
      if (empty($embed->favicon_link)) {
        $favicons = $html->find('link[rel=shortcut icon]', NULL, TRUE);
        if (count($favicons)) {
          $favicon = $favicons[0]->href;
          $favicon_url = preg_match('/^(http|https):\/\//', $favicon); 
          $favicon = (!$favicon_url) ? $embed->provider_url . '/' . $favicon : $favicon; 
          $host = parse_url($favicon, PHP_URL_HOST);
          if (empty($host)) {
            $favicon = NULL;
          }
        }
        if (empty($favicon)) {
          $host = parse_url($url, PHP_URL_HOST);
          $favicon = url('http://www.google.com/s2/favicons', array('query' => array('domain' => $host), 'absolute' => TRUE));
        }
        $embed->favicon_link = $favicon;
      }

      // TODO Get thumbnail.
      if (empty($embed->thumbnail_url)) {
        $embed->thumbnail_url = url(drupal_get_path('module', 'meedan_oembed') . '/theme/thumbnail.png', array('absolute' => TRUE));
      }

      // Call domain-specific scraping function if it exists.
      $callback = 'meedan_oembed_scrape_' . $domain;
      if (function_exists($callback)) {
        $callback($embed, $html);
      }
    }
  }
}

/**
 * Scrape Facebook page.
 */
/*
function meedan_oembed_scrape_facebook(&$embed, $html) {
  // If login page, bail now.
  if ($html->find('body[class=login_page]')) {
    $embed = NULL;
    return;
  }

  // Extract message.
  foreach ($html->find('div[class=mts]') as $todelete) {
    $todelete->outertext = '';
  }
  $embed->description = $html->find('span[class=messageBody]', 0)->innertext;

  // Extract author info.
  $author_block = $html->find('div[class=fbStreamPermalinkHeader]', 0);
  if ($author_block) {
    $embed->thumbnail_url = $author_block->find('img[class=profilePic]', 0)->src;
    $author_link = $author_block->find('div[class=UIImageBlock_Content] div a', 0);
    if ($author_link) {
      $embed->author_name = $author_link->innertext;
      $embed->author_url = $author_link->href;
    }
  }
}
*/
/**
 * Get domain name from url.
 * Get site name.
 * Choose largest token of the host.
 */
function _meedan_oembed_get_domain_name($url) {
  $parts = explode('.', parse_url($url, PHP_URL_HOST));
  $domain = '';
  foreach ($parts as $part) {
    if (strlen($part) > strlen($domain)) {
      $domain = $part;
    }
  }
  return strtolower($domain);
}

/**
 * Implementation of hook_theme().
 */
function meedan_oembed_theme() {
  $path = drupal_get_path('module', 'meedan_oembed') . '/theme';
  return array(
    'oembed__link__meedan_oembed_theme_generic' => array(
      'variables' => array('embed' => NULL), 
      'template' => 'oembed-generic',
      'path' => $path,
    ),  
    'oembed__link__meedan_oembed_theme_facebook' => array(
      'variables' => array('embed' => NULL),  
      'template' => 'oembed-facebook',
      'path' => $path,
    ),
  );
}

/**
 * Template preprocessor for 'oembed_link' with provider 'meedan_oembed_theme_facebook'.
 */
function template_preprocess_oembed__link__meedan_oembed_theme_facebook (&$vars) {
  $embed = $vars['embed'];
  $vars['author_img'] = l(theme('image', array('path' => $embed->thumbnail_url)), $embed->author_url, array('html' => TRUE));
  $vars['author_name'] = l($embed->author_name, $embed->author_url);
  $vars['content'] = $embed->description;
  $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
}

/**
 * Template preprocessor for 'oembed_link' with provider 'meedan_oembed_theme_generic'.
 */
function template_preprocess_oembed__link__meedan_oembed_theme_generic(&$vars) {
  $embed = $vars['embed'];
  $vars['favicon_link'] = l(theme('image', array('path' => $embed->favicon_link)), $embed->provider_url, array('html' => TRUE));
  $vars['title_link'] = l($embed->title, $embed->url);
  $vars['content'] = $embed->description;
  $vars['thumbnail'] = l(theme('image', array('path' => $embed->thumbnail_url)), $embed->url, array('html' => TRUE));
  $vars['domain_link'] = l($embed->provider_name, $embed->provider_url);
}

/**
* Implements hook_entity_info_alter().
*/
function meedan_oembed_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['meedan_oembed'] = array(
    'label' => t('Meedan oEmbed'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_filter_info().
 */
function meedan_oembed_filter_info() {
  $filters['filter_meedan_oembed'] = array(
    'title' => t('Meedan oEmbed filter'),
    'description' => t('Every instance of [report-title:$nid] will be replaced with the corresponding Meedan oEmbed node view.'),
    'prepare callback' => '_meedan_oembed_filter_prepare',
    'process callback' => '_meedan_oembed_filter_process',
    'tips callback' => '_meedan_oembed_filter_tips',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Meedan oEmbed filter prepare callback.
 */
function _meedan_oembed_filter_prepare($text, $filter) {
  return $text;
}

/**
 * Time filter process callback.
 *
 * Now, in the "process" step, we'll search for our escaped time tags and
 * do the real filtering: replace nid with meedan oembed node view.
 */
function _meedan_oembed_filter_process($text, $filter) {
  $matches = array();
  preg_match_all('@\[[a-z0-0-_]+:([0-9]+)\]@', $text, $matches);
  if (count($matches[1])) {
    $output = array();
    foreach ($matches[1] as $key => $nid) {
      if (is_numeric($nid)) {
        $node = node_load($nid);
        if (is_object($node)) {
          // Render node using custom Meedan oEmbed view.
          $node_view = drupal_render(node_view($node, 'meedan_oembed'));
          // Replace [report-title:$nid] with node view.
          $text = str_replace($matches[0][$key], $node_view, $text);
        }
      }
    }
  }
  return $text;
}

/**
 * Filter tips callback for meedan oembed filter.
 *
 */
function _meedan_oembed_filter_tips($filter, $format, $long = FALSE) {
  return t('<em>[report-title:$nid]</em> is replaced with the Meedan oEmbed node view for <em>$nid</em>.');
}

