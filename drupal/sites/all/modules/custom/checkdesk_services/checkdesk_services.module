<?php

/**
 * Implements hook_language_switch_links_alter().
 *
 * Hide the en-NG language from the language switcher block
 */
function checkdesk_services_language_switch_links_alter(&$result, $type, $path) {
  unset($result['en-NG']);
}

/**
 * Implements hook_init().
 */
function checkdesk_services_init() {
  global $language;

  // If a user somehow stumbles into the en-NG language permanently redirect
  // them to the same URL for the regular English language.
  if (is_object($language) && $language->language == 'en-NG') {
    $query = array_diff_key($_GET, array('q' => ''));
    $all_languages = language_list();
    drupal_goto($_GET['q'], array('language' => $all_languages['en'], 'query' => $query), 301);
  }
}

/**
 * Implements hook_menu_alter().
 */
function checkdesk_services_menu_alter(&$items) {
  $items['services/session/token']['page callback'] = '_checkdesk_services_session_token';
}

/**
 * Overridden implementation of _services_session_token(). Prints the token and
 * additionally sets a CSRF-Token cookie which is used by the Angular app.
 */
function _checkdesk_services_session_token() {
  drupal_add_http_header('Content-Type', 'text/plain');
  $token = drupal_get_token('services');
  setcookie('CSRF-Token', $token, time() + 60 * 60 * 24 * 7, base_path());
  print $token;
  drupal_exit();
}

/**
 * Implements hook_locale().
 */
function checkdesk_services_locale($op = 'groups') {
  switch ($op) {
    case 'groups':
      return array('ui' => t('Checkdesk AngularJS UI'));
  }
}

/**
 * Retrieves a Services module endpoint CTools object by name.
 */
function checkdesk_services_endpoint($name) {
  ctools_include('export');
  $endpoints = ctools_export_load_object('services_endpoint', 'all', array('name' => $name));

  if (count($endpoints) <= 0) {
    return FALSE; // TODO: Log errors in checkdesk_services_is_api_call().
  }

  $endpoint = reset($endpoints);

  return $endpoint;
}

/**
 * Is the current menu path inside the API?
 */
function checkdesk_services_is_api_call() {
  $endpoint_name = variable_get('checkdesk_services_endpoint_name', 'api');

  if (($endpoint = checkdesk_services_endpoint($endpoint_name)) && (!isset($endpoint->disabled) || !$endpoint->disabled)) {
    return preg_match('/^' . preg_quote($endpoint->path, '/') . '/', $_GET['q']);
  }

  return FALSE; // TODO: Log errors in checkdesk_services_is_api_call().
}

/**
 * Implements hook_node_load().
 */
function checkdesk_services_node_load($nodes, $types) {
  // Only alter when running in the API
  if (!checkdesk_services_is_api_call()) {
    return;
  }

  foreach ($nodes as $nid => $node) {
    $nodes[$nid]->checkdesk = (object) array();

    $rating = taxonomy_term_load($node->field_rating[LANGUAGE_NONE][0]['tid']);

    // TODO: Un-stub the activity count.
    $nodes[$nid]->checkdesk->activity_count         = 123;
    // TODO: Un-stub the num journalists.
    $nodes[$nid]->checkdesk->num_journalists        = 2;
    // TODO: Un-stub the num citizens.
    $nodes[$nid]->checkdesk->num_citizens           = 16;
    $nodes[$nid]->checkdesk->rating                 = (object) array('name' => $rating->name);

    checkdesk_services_node_load_scrub($nodes[$nid]);
  }
}

/**
 * Scrubs junk from nodes sent out via services module.
 */
function checkdesk_services_node_load_scrub($node) {
  unset($node->rdf_mapping); // FIXME: Can RDF data be removed more cleanly here?
  unset($node->data); // Node $author->data
}
