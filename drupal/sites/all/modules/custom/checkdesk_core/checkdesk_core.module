<?php

/**
 * Implements hook_init().
 */
function checkdesk_core_init() {
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.droppable');
  drupal_add_library('system', 'drupal.ajax');
}

/**
 * Implements hook_permission().
 */
function checkdesk_core_permission() {
  return array(
    'add report to story' => array(
      'title' => t('Add report to story'),
      'description' => t('User can add a report to a story. Otherwise, only allowed to suggest the addition.'),
    ),
  );
}

/**
 * Implements hook_menu(). 
 */
function checkdesk_core_menu() {
  $items = array();

  $items['<sub>'] = array(
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['<nolink>'] = array(
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['node/%checkdesk_report/checkdesk/suggest'] = array(
    'title' => 'Add report to story',
    'title callback' => '_checkdesk_core_report_suggest_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_checkdesk_core_report_suggest', 1),
    'access callback' => '_checkdesk_core_report_can_suggest',
    'access arguments' => array(1),
  );
  $items['node/%checkdesk_report/checkdesk/modal/suggest/%ctools_js'] = array(
    'title' => 'Add report to story',
    'title callback' => '_checkdesk_core_report_suggest_title',
    'title arguments' => array(1),
    'page callback' => '_checkdesk_core_report_suggest_modal',
    'page arguments' => array(1, 5),
    'access callback' => '_checkdesk_core_report_can_suggest',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['node/flag/confirm/%/%flag/%/%ctools_js'] = array(
    'title' => 'Confirm',
    'page callback' => '_checkdesk_core_flags_confirm_modal',
    'page arguments' => array(3, 4, 5, 6),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['core/messages'] = array(
    'title' => 'Invoke message',
    'page callback' => '_checkdesk_core_invoke_messages',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  /*
  $items['node/%checkdesk_report/checkdesk/publish'] = array(
    'title' => 'Publish a report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_checkdesk_core_report_publish', 1),
    'access arguments' => array('create post content'),
  );
  */
  $items['admin/config/system/checkdesk'] = array(
    'title' => 'Checkdesk',
    'description' => 'Manage general Checkdesk configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_checkdesk_core_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['report-view-modal/%ctools_js'] = array(
    'title' => 'Report view (modal)',
    'page callback' => '_checkdesk_modal_report_view',
    'page arguments' => array(1),
    'access callback' => TRUE,
    //'modal' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['modal/%ctools_js'] = array(
    'page callback' => 'checkdesk_core_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Menu function for `modal/%ctools_js`.
 */
function checkdesk_core_modal_callback($js = FALSE) {
  $alias = preg_replace('/([a-z]{2}\/)?modal\/[^\/]+\//', '', request_path());
  $path = drupal_lookup_path('source', $alias);
  $node = menu_get_object('node', 1, $path);
  $output = drupal_render(node_view($node));
  $title = $node->title;
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    // custom settings array for bookmarlet modal
    $modal_style = array(
      'modal-popup-bookmarklet' => array(
        'modalSize' => array(
          'type' => 'fixed',
          'width' => 700,
          'height' => 350,
          'addWidth' => 0,
          'addHeight' => 0
        ),
        'modalOptions' => array(
          'opacity' => .5,
          'background-color' => '#000',
        ),
        'animation' => 'show',
        'animationSpeed' => 40,
        'modalTheme' => 'CToolsModalDialog',
        'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'checkdesk_core'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
      ),
    );
    
    drupal_add_js($modal_style, 'setting');
    ctools_modal_render($title, $output);
  
  }
  else {
    drupal_set_title($title);
    return $output;
  }
}

/**
 * Access function for 
 */
function _checkdesk_core_report_can_suggest($report) {
  global $user;
  return user_access('add report to story') || ($report->uid === $user->uid);
}

/**
 * Menu function for `report-view-modal/%ctools_js`.
 */
function _checkdesk_modal_report_view($js = FALSE) {
  ctools_include('modal');
  $nid = arg(2);
  $node = node_load($nid);
  $title = $node->title;
  $output = drupal_render(node_view($node));
  if ($js) {
    ctools_modal_render($title, $output);
  }
  else {
    drupal_set_title($title);
    print $output . ' no ctools';
  }
}

/**
 * Form function for `_checkdesk_core_settings`.
 */
function _checkdesk_core_settings($form, $form_state) {
  $form['checkdesk_site_owner'] = array(
    '#title' => t('Site owner'),
    '#type' => 'textfield',
    '#default_value' => variable_get('checkdesk_site_owner', ''),
  );
  $form['checkdesk_site_owner_url'] = array(
    '#title' => t('Site owner URL'),
    '#type' => 'textfield',
    '#default_value' => variable_get('checkdesk_site_owner_url', ''),
  );
  $form['checkdesk_factchecking_statement'] = array(
    '#title' => t('A "verified" status means'),
    '#type' => 'textarea',
    '#default_value' => variable_get('checkdesk_factchecking_statement', ''),
  );

  return system_settings_form($form);
}

/**
 * Load function for reports.
 */
function checkdesk_report_load($nid) {
  $report = node_load($nid);
  if ($report && $report->type == 'media') {
    return $report;
  }
  return FALSE;
}

/**
 * Title callback for `_checkdesk_core_report_suggest`.
 */ 
function _checkdesk_core_report_suggest_title($report) {
  return user_access('add report to story') ? 
    t('Add Report "!title" to Story', array(
      '!title' => views_trim_text(array('max_length' => 30, 'ellipsis' => TRUE), $report->title))
    ) : 
    t('Suggest Report "!title" to Story', array(
      '!title' => views_trim_text(array('max_length' => 30, 'ellipsis' => TRUE), $report->title))
    );
}

/**
 * Form function for `_checkdesk_core_report_suggest`.
 * Allow user to choose from all stories not already associated with this report.
 */
function _checkdesk_core_report_suggest($form, $form_state, $report = NULL) {
  if (empty($report)) {
    $report = $form_state['report'];
  }
  $stories = db_query("
    SELECT nid, concat(substring(title, 1, 48), '...') as title
    FROM {node} 
    WHERE type='discussion' 
    AND nid NOT IN (
      SELECT field_stories_target_id 
      FROM {field_data_field_stories}
      WHERE entity_id = :report
    )
    ORDER BY created DESC 
    LIMIT 10
    ", array(':report' => $report->nid))->fetchAllKeyed();
  $form['story'] = array(
    '#type' => 'select',
    '#options' => $stories,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#report'] = $report;
  return $form;
}

/**
 * Submit function for `_checkdesk_core_report_suggest`.
 */
function _checkdesk_core_report_suggest_submit($form, &$form_state) {
  // Add the story to the report.
  $report = $form['#report'];
  $report->field_stories[LANGUAGE_NONE][]['target_id'] = $form_state['values']['story'];
  $story = node_load($form_state['values']['story']);
  $form_state['values']['story_title'] = $story->title;
  node_save($report);

  // Redirect to story. 
  if (user_access('add report to story')) {
    $form_state['redirect'] = array('node/add/post', array('query' => array('report' => $report->nid, 'story' => $form_state['values']['story'])));
  }
}

/**
 * Modal function for `_checkdesk_core_report_suggest`.
 */
function _checkdesk_core_report_suggest_modal($report, $js) {
  if (!$js) {
    drupal_goto('node/' . $report->nid . '/checkdesk/suggest');
    return;
  }

  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'ajax' => TRUE,
    'title' => _checkdesk_core_report_suggest_title($report),
    'report' => $report,
  );
  
  $commands = ctools_modal_form_wrapper('_checkdesk_core_report_suggest', $form_state);

  if (!empty($form_state['executed'])) {
    // Add the responder javascript, required by ctools
    ctools_add_js('ajax-responder');

    // Array with ajax response.
    $commands = array();
    // Create ajax command array, set the message and dismiss the modal window.
    $message = t('<b>' . views_trim_text(array('max_length' => 30, 'ellipsis' => TRUE), $report->title) . '</b> added to <b>' . $form_state['values']['story_title'] . '</b>');
    drupal_set_message(t($message));
    // $commands[] = ajax_command_prepend('#messages-container', theme('status_messages'));
    $commands[] = ctools_modal_command_dismiss();

    // Redirect to story. 
    if (user_access('add report to story')) {
      $commands[] = ctools_ajax_command_redirect('node/add/post', 0, array('query' => array('report' => $report->nid, 'story' => $form_state['values']['story'])));
    }
  }

  print ajax_render($commands);
  exit;
}

/**
 * Implements hook_flag_link_type_info().
 */
function checkdesk_core_flag_link_type_info() {
  return array(
    'checkdesk_modal' => array(
      'title' => t('Open confirmation in modal'),
      'description' => t('The user will be shown a modal window to confirm the flag.'),
      'options' => array(
        'confirm_modal_style' => 'modal-popup-small',
        'flag_confirmation' => '',
        'unflag_confirmation' => '',
      ),
      'uses standard js' => FALSE,
      'uses standard css' => FALSE,
    ),
  );
}

/*
 * Implements hook_flag_link().
 */
function checkdesk_core_flag_link($flag, $action, $content_id) {
  return array(
    'href' => 'node/flag/confirm/' . "$action/$flag->name/$content_id" . '/nojs',
    'query' => drupal_get_destination(),
    'attributes' => array('class' => array('ctools-use-modal')),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for `flag_form`.
 */
function checkdesk_core_form_flag_form_alter(&$form, &$form_state, $form_id) {
  $flag = $form['#flag'];
  $form['display']['link_options_checkdesk_modal'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options for the "Confirmation form" link type'),
    // Any "link type" provider module must put its settings fields inside
    // a fieldset whose HTML ID is link-options-LINKTYPE, where LINKTYPE is
    // the machine-name of the link type. This is necessary for the
    // radiobutton's JavaScript dependency feature to work.
    '#id' => 'link-options-checkdesk_modal',
    '#weight' => 22,
  );

  $form['display']['link_options_checkdesk_modal']['confirm_modal_style'] = array(
    '#type' => 'radios',
    '#title' => t('Confirmation modal window sytle'),
    '#default_value' => isset($flag->confirm_modal_style) ? $flag->confirm_modal_style : 'modal-popup-small',
    '#options' => array(
      'modal-popup-small' => t('Small popup'),
      'modal-popup-medium' => t('Medium popup'),
      'modal-popup-large' => t('Large popup'),
    ),
  );
  $form['display']['link_options_checkdesk_modal']['flag_confirmation'] = array(
    '#type' => 'textfield',
    '#title' => t('Flag confirmation message'),
    '#default_value' => isset($flag->flag_confirmation) ? $flag->flag_confirmation : '',
    '#description' => t('Message displayed if the user has clicked the "flag this" link and confirmation is required. Usually presented in the form of a question such as, "Are you sure you want to flag this content?"'),
    '#access' => empty($flag->locked['flag_confirmation']),
  );

  $form['display']['link_options_checkdesk_modal']['unflag_confirmation'] = array(
    '#type' => 'textfield',
    '#title' => t('Unflag confirmation message'),
    '#default_value' => isset($flag->unflag_confirmation) ? $flag->unflag_confirmation : '',
    '#description' => t('Message displayed if the user has clicked the "unflag this" link and confirmation is required. Usually presented in the form of a question such as, "Are you sure you want to unflag this content?"'),
    '#access' => empty($flag->locked['unflag_confirmation']),
  );

}

function checkdesk_core_preprocess_flag(&$variables) {
  if ($variables['flag']->link_type == 'checkdesk_modal' && $variables['link_href']) {
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();

    $flag_css_name = 'flag-' . str_replace('_', '-', $variables['flag']->name);
    $variables['flag_classes'] .= ' ctools-modal-' . $variables['flag']->confirm_modal_style;
    $variables['flag_classes'] .= ' '. $flag_css_name;

    $path = str_replace("/checkdesk/drupal/", "", $variables['link']['href']);
    $variables['modal_link'] = ctools_modal_text_button($variables['link_text'], $path, $variables['link_title'], $variables['flag_classes']);
  }
}


/**
 * Modal function for `flag_confirm`.
 */
function _checkdesk_core_flags_confirm_modal($action, $flag, $nid, $js){

  if (!$js) {
    return drupal_get_form('flag_confirm', $action, $flag, $nid);
  }

  module_load_include('inc', 'flag', 'includes/flag.pages');

  ctools_include('modal');
  ctools_include('ajax');

  $action_confirmation = $flag->action . '_confirmation';
  
  // Pass to form generated by the Flag module
  $form_state = array(
    'title' => $flag->$action_confirmation,
    'ajax' => TRUE,
    'build_info' => array(
      'args' => array(
        0 => $action,
        1 => $flag,
        3 => $nid,
      ),
    ),
  );

  $commands = ctools_modal_form_wrapper('flag_confirm', $form_state);

  if (!empty($form_state['executed'])) {
    // Add the responder javascript, required by ctools
    ctools_add_js('ajax-responder');


    // set new link
    if($action == 'flag') {
      $new_url = 'node/flag/confirm/unflag/' . "$flag->name/$nid" . '/nojs';
      $new_action = 'unflag';
      $new_text_link = $flag->unflag_short;
    } else {
      $new_url = 'node/flag/confirm/flag/' . "$flag->name/$nid" . '/nojs';  
      $new_action = 'flag';
      $new_text_link = $flag->flag_short;
    }
    $flag_css_name = str_replace('_', '-', $flag->name);

    // $new_url = checkdesk_core_flag_link($flag, $new_action, $nid);
    $new_html = ctools_modal_text_button($new_text_link, $new_url, $new_text_link, 'ctools-modal-checkdesk-style ' . 'flag-'.$flag_css_name);

    // pass the new URL to JS
    $flag_settings = array(
      'flag' => $flag,
      'action' => $action,
      'newAction' => $new_action,
      'newHTML' => $new_html,
      'url' => $new_url,
    );

    //drupal_add_js(array('checkdesk' => array('flagSettings' => $flag_settings)), 'setting');
    //ctools_add_js('checkdesk_core_ex', 'checkdesk_core');

    // Array with ajax response.
    $commands = array();
    // Create ajax command array, refresh messagess and dismiss the modal window.
    // Disabling ajax message refresh
    // switching to inline post refresh messages
    $commands[] = ajax_command_prepend('#messages-container', theme('status_messages'));
    $commands[] = ctools_modal_command_dismiss();
    $commands[] = ctools_ajax_command_reload();
  }

  print ajax_render($commands);
  exit;
}

/**
 * Ajax callback for invoking messages
 */
function _checkdesk_core_invoke_messages($action, $type) {

  if ($type != 'ajax') {
    // This is js only.
    return 'Oh well';
  }
 
  $commands = array();
  $commands[] = ajax_command_prepend('#messages-container', theme('status_messages'));
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * Form function for `_checkdesk_core_report_publish`.
 */
function _checkdesk_core_report_publish($form, $form_state, $report) {
  $stories = db_query("
    SELECT nid, title 
    FROM {node} 
    WHERE type='discussion' 
    ")->fetchAllKeyed();
  $form['story'] = array(
    '#type' => 'select',
    '#title' => t('Story'),
    '#options' => $stories,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#report'] = $report;
  return $form;
}

/**
 * Submit function for `_checkdesk_core_report_publish`.
 */
function _checkdesk_core_report_publish_submit($form, &$form_state) {
  // Add the story to the report.
  // TODO Don't add the story to the report if it's already there.
  $report = $form['#report'];
  $report->field_stories[LANGUAGE_NONE][]['target_id'] = $form_state['values']['story'];
  node_save($report);

  // Redirect to story. 
  $form_state['redirect'] = array('node/add/post', array('query' => array('report' => $report->nid, 'story' => $form_state['values']['story'])));
}

/**
 * Retrieve action links on given node.
 */
function _checkdesk_core_node_links($node, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $links = array();

  // Links for reports.
  if ($node->type == 'media') {
    $url = url('node/' . $node->nid, array('absolute' => TRUE));
    if (_checkdesk_core_report_can_suggest($node)) {
      $links['checkdesk-suggest'] = array(
        'title' => user_access('add report to story') ? t('Add to Story') : t('Suggest to Story'),
        'href' => 'node/' . $node->nid . '/checkdesk/modal/suggest/nojs',
        'query' => array(
          'destination' => $_GET['q'],
        ),
      );
    }
    if (node_access('update', $node)) {
      $links['checkdesk-edit'] = array(
        'title' => t('Edit'),
        'href' => 'node/' . $node->nid . '/edit',
        'query' => array(
          'destination' => $_GET['q'],
        ),
      );
    }
    if (node_access('delete', $node)) {
      $links['checkdesk-delete'] = array(
        'title' => t('Delete'),
        'href' => 'node/' . $node->nid . '/delete',
        'query' => array(
          'destination' => $_GET['q'],
        ),
      );
    }
    $links['checkdesk-share-facebook'] = array(
      'title' => t('Share on Facebook'),
      'href' => $url,
      'attributes' => array('title' => $node->title, 'class' => array('facebook')),
    );
    $links['checkdesk-share-twitter'] = array(
      'title' => t('Share on Twitter'),
      'href' => $url,
      'attributes' => array('title' => $node->title, 'class' => array('twitter')),
    );
    $links['checkdesk-share-google'] = array(
      'title' => t('Share on Google+'),
      'href' => $url,
      'attributes' => array('title' => $node->title, 'class' => array('google')),
    );
  }

  // Links for stories, not as a dropdown menu.
  else if ($node->type == 'discussion') {
    if (node_access('update', $node)) {
      $links['checkdesk-edit-flat'] = array(
        'title' => t('Edit'),
        'href' => 'node/' . $node->nid . '/edit',
        'query' => array(
          'destination' => $_GET['q'],
        ),
      );
    }
    if (node_access('delete', $node)) {
      $links['checkdesk-delete-flat'] = array(
        'title' => t('Delete'),
        'href' => 'node/' . $node->nid . '/delete',
        'query' => array(
          'destination' => $_GET['q'],
        ),
      );
    }
  }

  return $links;
}

/**
 * Implements hook_flag_access().
 */ 
function checkdesk_core_flag_access($flag, $entity_id, $action, $account) {
  // Prevent "flag as graphic" from appearing if report already flagged as graphic by journalist.
  if ($flag->name == 'graphic') {
    $flag_journalist = flag_get_flag('graphic_journalist');
    if ($flag_journalist->is_flagged($entity_id)) {
      return FALSE;
    }
  }
}

/**
 * Implements hook_node_view().
 */
function checkdesk_core_node_view($node, $view_mode, $langcode) {
  // Get node links.
  $links = _checkdesk_core_node_links($node); 
  if (!empty($links)) {
    $node->content['links']['checkdesk'] = array(
      '#theme' => 'links',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }

  // Add decorations to story nodes.
  if ($node->type == 'discussion') {
    $node->content['story_blogger'] = array(
      '#theme' => 'checkdesk_core_story_blogger',
      '#story' => $node,
    );
    $node->content['story_status'] = array(
      '#theme' => 'checkdesk_core_story_status',
      '#story' => $node,
    );
    $node->content['story_drafts'] = array(
      '#theme' => 'checkdesk_core_story_drafts',
      '#story' => $node,
    );
  }

  // Add decorations to report nodes.
  if ($node->type == 'media') {
    $node->content['report_source'] = array(
      '#theme' => 'checkdesk_core_report_source',
      '#report' => $node,
    );
  }
}

/*
 * Implements hook_contextual_links_view_alter().
 */
function checkdesk_core_contextual_links_view_alter(&$element, $items) {
  if (!isset($element['#element']['#node']->nid)) return;
  $links = _checkdesk_core_node_links($element['#element']['#node']);
  if (!empty($links)) {
    $element['#links'] += $links;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for `post_node_form`.
 */
function checkdesk_core_form_post_node_form_alter(&$form, &$form_state) {
  // Are we showing the post form on the desk page?
  if (($node = menu_get_object()) && $node->type == 'discussion') {
    // Hard-code desk reference to current desk.
    $form['field_desk'][LANGUAGE_NONE]['#default_value'] = $node->nid;
    $form['field_desk']['#access'] = false;
  }

  // Hide summary
  unset($form['body'][LANGUAGE_NONE][0]['summary']);

  // Make the body field a drop target for reports.
  $form['body']['#prefix'] = '<div class="droppable">';
  $form['body']['#suffix'] = '</div>';

  // Set default parameters if any.
  if (isset($_GET['story'])) {
    // Hard-code desk reference to given desk.
    $form['field_desk'][LANGUAGE_NONE]['#default_value'] = $_GET['story'];
    $form['field_desk']['#access'] = false;
  }
  if (isset($_GET['report'])) {
    // Add given report to body.
    $node = node_load($_GET['report']);
    $form['body'][LANGUAGE_NONE][0]['#default_value'] = checkdesk_core_droppable_reference($node);
    $form['body'][LANGUAGE_NONE][0]['#format'] = 'liveblog';
  }
  $form['#validate'][] = '_checkdesk_core_post_node_form_validate';
  $form['actions']['submit']['#submit'][] = $form['actions']['draft']['#submit'][] = '_checkdesk_core_post_node_form_submit';
}

/**
 * Submit function for `post_node_form`.
 */
function _checkdesk_core_post_node_form_submit($form, &$form_state) {
  // Add wording for saving draft.
  if ($form_state['triggering_element']['#value'] == $form['actions']['draft']['#value']) {
    drupal_set_message(t('@type %title saved as draft.', array('@type' => t('Update'), '%title' => $form_state['values']['title'])));
  }
}

/**
 * Validation function for `post_node_form`.
 */
function _checkdesk_core_post_node_form_validate($form, &$form_state) {
  // Prevent user from saving a new draft if another one exists already.
  if ($form_state['triggering_element']['#value'] == $form['actions']['draft']['#value']) {
    $desk_nid = $form_state['values']['field_desk'][LANGUAGE_NONE][0]['target_id'];
    global $user;
    $draft_nid = db_query("
  SELECT n.nid 
  FROM {node} n INNER JOIN {field_data_field_desk} d ON n.nid = d.entity_id 
  WHERE n.type = 'post' 
  AND n.status = 0
  AND d.field_desk_target_id = :desk_nid
  AND n.uid = :uid
    ", array(':desk_nid' => $desk_nid, ':uid' => $user->uid))->fetchCol();
    if ($draft_nid) {
      form_set_error('field_desk', 
        t('This story already has a draft that you created. You cannot save more than one draft for each story. You can <a href="@url">edit that draft now</a>.',
          array('@url' => url('node/' . $desk_nid))
        )
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for `comment_node_discussion_form`.
 */
function checkdesk_core_form_comment_node_discussion_form_alter(&$form, &$form_state) {
  // Hide comment attachment field on comment form.
  $form['field_attachment']['#access'] = false;
}

/**
 * Implements hook_views_pre_render().
 */
function checkdesk_core_views_pre_render(&$view) {
  if ($view->name == 'desk_reports') {
    // Setup drag & drop.
    drupal_add_js(drupal_get_path('module', 'checkdesk_core') . '/js/checkdesk_core.js');
    drupal_add_js(libraries_get_path('insertatcaret') . '/jquery.insertatcaret.js');

    $data = array();
    foreach ($view->result as $datum) {
      $node = (object) array(
        'nid'   => $datum->nid,
        'title' => $datum->node_title,
        'type'  => 'media',
      );

      $datum->droppable_ref = checkdesk_core_droppable_reference($node);

      $data['report-' . $datum->nid] = $datum;
    }

    // Send view results to client.
    drupal_add_js(array('checkdesk' => array('reports' => $data)), 'setting');
  }
}

/**
 * (Ab)use pathauto to create the drag and drop media reference.
 *
 * @param $node
 *  A node object, needs at least 'nid' and 'title' attributes.
 */
function checkdesk_core_droppable_reference($node) {
  module_load_include('inc', 'pathauto');
  $pathauto_pattern = '[node:title]';

  // Replace any tokens in the pattern. Uses callback option to clean replacements. No sanitization.
  $alias = token_replace($pathauto_pattern, array('node' => $node), array(
    'sanitize' => FALSE,
    'clear' => TRUE,
    'callback' => 'pathauto_clean_token_values',
    'language' => (object) array('language' => LANGUAGE_NONE),
    'pathauto' => TRUE,
  ));
  $alias = pathauto_clean_alias($alias);

  return '[' . $alias . ':' . $node->nid . ']';
}

/**
 * Implements hook_entity_property_info().
 */
function checkdesk_core_entity_property_info() {
  $info = array();
  $properties = &$info['node']['bundles']['post']['properties'];

  $properties['reports'] = array(
    'label' => t('Reports'),
    'type' => 'list<node>',
    'description' => t("List of reports in this post."),
    'getter callback' => 'checkdesk_core_entity_property_get_reports',
  );
  return $info;
}

/**
 * Getter function for `reports` property.
 */ 
function checkdesk_core_entity_property_get_reports($node, array $options, $name, $entity_type) {
  $reports = array();
  if (!isset($node->body[LANGUAGE_NONE][0])) return $reports;
  $text = $node->body[LANGUAGE_NONE][0]['value'];
  $matches = array();
  preg_match_all('@\[\S+:(\d+)\]@', $text, $matches);
  if (count($matches[1])) {
    $output = array();
    foreach ($matches[1] as $key => $nid) {
      if (is_numeric($nid)) {
        $node = node_load($nid);
        if (is_object($node)) {
          $reports[] = $node;
        }
      }
    }
  }
  return $reports;
}

/**
 * Implements of hook_form_views_exposed_form_alter().
 */
function checkdesk_core_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-desk-reports-block') {
    $title_options = array('contains' => t('Show reports with this keyword'), 'not'=> t('Exclude report with this keyword'));
    $source_options = array('contains' => t('Show reports from this source'), 'not'=> t('Exclude report from this source'));
    $form['title_op']['#options'] = $title_options;
    $form['source_op']['#options'] = $source_options;
    $form['source_op']['#process'] = $form['title_op']['#process'] = array('form_process_radios');
    $form['source_op']['#attributes'] = $form['title_op']['#attributes'] = array('class' => array('bef-select-as-radios'));
    $form['source_op']['#theme'] = $form['title_op']['#theme'] = 'select_as_radios';
    $form['field_stories_target_id']['#options'] = array_reverse($form['field_stories_target_id']['#options'], TRUE);
    //Display filter info.
    if (!empty($_REQUEST['title'])) {
      $form['title']['#description'] = str_replace(array('{key:contains}', '{key:not}'), array('Showing reports with', 'Excluding reports with'), $form['title']['#description']);
    }
    else {
      $form['title']['#description'] = NULL;
    }
    $form['title']['#attributes']['placeholder'] = t('Keyword');
    if (isset($_REQUEST['source'])) {
      $form['source']['#description'] = str_replace(array('{key:contains}', '{key:not}'), array('Showing reports from', 'Excluding reports from'), $form['source']['#description']);
    }
    else {
      $form['source']['#description'] = NULL;
    }
    $form['source']['#attributes']['placeholder'] = 'YouTube'; // don't translate this as the sources database won't understand the translation.
    //Fix reset button
    $form['#action'] = url($_GET['q']);
  }
}


/**
 * Implements hook_theme().
 */
function checkdesk_core_theme() {
  $themes = array();
  $base = array(
    'file' => 'theme.inc',
    'path' => drupal_get_path('module', 'checkdesk_core') . '/theme',
  );

  $themes['checkdesk_core_story_blogger'] = array(
    'template' => 'story_blogger',
    'variables' => array(
      'story' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_story_status'] = array(
    'template' => 'story_status',
    'variables' => array(
      'story' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_story_drafts'] = array(
    'template' => 'story_drafts',
    'variables' => array(
      'story' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_report_source'] = array(
    'template' => 'report_source',
    'variables' => array(
      'report' => NULL,
    ),
  ) + $base;

  return $themes;
}

/**
 * API function to find whether user is online or offline.
 */
function checkdesk_core_user_online($account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $interval = REQUEST_TIME - variable_get('user_block_seconds_online', 900);
  $count = db_query("SELECT COUNT(DISTINCT s.uid) FROM {sessions} s WHERE s.timestamp >= :timestamp AND s.uid = :uid", array(':timestamp' => $interval, ':uid' => $account->uid))->fetchField();
  return $count > 0;
}

/**
 * API function to find whether a node is flagged for fact-checking.
 */
function checkdesk_core_fact_checking($node) {
  $flag_name = 'factcheck';
  $flag = flag_get_flag($flag_name);
  if (!$flag) {
    watchdog('checkdesk', 'Flag "@flag" not found for fact-checking.', array('@flag' => $flag_name), WATCHDOG_ERROR);
    return FALSE;
  }
  return $flag->is_flagged($node->nid);
}

/**
 * API function to return number of drafted updates of a story.
 */
function checkdesk_core_story_drafted_updates_count($node) {
  $count = db_query("SELECT COUNT(*) FROM {node} n INNER JOIN {field_data_field_desk} f ON f.entity_id = n.nid WHERE n.type = 'post' AND n.status = 0 AND f.bundle = 'post' AND field_desk_target_id = " . $node->nid)->fetchField();
  return intval($count);
}

/**
 * Implements hook_block_info().
 */
function checkdesk_core_block_info() {
  $blocks = array();

  $blocks['post'] = array(
    'info' => 'Report form block',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function checkdesk_core_block_view($delta = '') {
  switch ($delta) {
    case 'post':
      return checkdesk_core_report_form_block();
  }
}

/**
 * Generate report form.
 */
function checkdesk_core_report_form_block() {
  if (!user_access('create post content')) {
    return array('subject' => NULL, 'content' => NULL);
  }

  // Include page handler for node_add()
  module_load_include('inc', 'node', 'node.pages');
  $title = drupal_get_title();

  // If we're on a story page and there's already a draft, show it.
  $desk_nid = 0;
  if (($node = menu_get_object()) && $node->type == 'discussion') {
    $desk_nid = $node->nid;
  }
  global $user;
  $draft_nid = db_query("
SELECT n.nid 
FROM {node} n INNER JOIN {field_data_field_desk} d ON n.nid = d.entity_id 
WHERE n.type = 'post' 
AND n.status = 0
AND d.field_desk_target_id = :desk_nid
AND n.uid = :uid
  ", array(':desk_nid' => $desk_nid, ':uid' => $user->uid))->fetchCol();
  if ($draft_nid) {
    $draft = node_load($draft_nid);
    $content = node_page_edit($draft);
    $subject = t('Edit draft update');
  }
  else {
    $content = node_add('post');
    $subject = t('Compose new update');
  }

  drupal_set_title($title);
  return array('subject' => $subject, 'content' => $content);
} 

/**
 * Implementation of hook_heartbeat_theme_alter()
 */
function checkdesk_core_heartbeat_theme_alter(&$messages, HeartbeatStream $heartbeatStream) {
  global $base_path, $base_root, $language;
  // Localize some variables
  foreach ($messages as $key => $message) {
    foreach ($message->variables as $variable => $value) {
      // Translate strings
      if (in_array($variable, array('!flag_type', '!fact_checking_status', '!status'))) {
        $messages[$key]->variables[$variable] = t($value);
      }
      // Localize URLs
      else if (in_array($variable, array('!user_url', '!story_url', '!report_url', '!update_url', '!flag_author_url'))) {
        $url = parse_url($value);
        if ($url && $url['scheme'] . '://' . $url['host'] == $base_root) {
          $alias = preg_replace('/^' . preg_quote($base_path, '/') . '/', '', $url['path']);
          if (variable_get('locale_language_negotiation_url_part', LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
            list($langcode, $alias) = explode('/', $alias, 2);
          }
          $path = drupal_lookup_path('source', urldecode($alias), $langcode);
          if (empty($path)) $path = $alias;
          $messages[$key]->variables[$variable] = url($path, array('language' => $language, 'absolute' => TRUE, 'alias' => TRUE));
        }
      }
    }
    $messages[$key]->message = t($message->template->message, $message->variables);
  }

  // Additional processing is not necessary for notifications
  $view = views_get_current_view();
  if (isset($view) && $view->name == 'my_notifications') return; 

  foreach ($messages as $key => $message) {
    if ($message->nid > 0 && in_array($message->message_id, array('status_report', 'new_comment_report', 'new_report', 'publish_report'))) {
      $node = node_load($message->nid);
      if ($node->type == 'media') {
        $messages[$key]->message = theme('checkdesk_heartbeat_content',  array(
          'message' => $message, 
          'node' => $node,
          ));
      }
    }
  }
}

define('RATING_IN_PROGRESS', 'In Progress');

/**
 * Implements hook_form_FORM_ID_alter() for `comment_node_media_form`.
 */
function checkdesk_core_form_comment_node_media_form_alter(&$form, $form_state, $form_id) {
  $term = isset($form['#node']->field_rating[LANGUAGE_NONE][0]['taxonomy_term']) ? 
    $form['#node']->field_rating[LANGUAGE_NONE][0]['taxonomy_term'] :
    taxonomy_term_load($form['#node']->field_rating[LANGUAGE_NONE][0]['tid']);
  if ($term->name !== RATING_IN_PROGRESS) {
    $form['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function checkdesk_core_form_alter(&$form, $form_state, $form_id) {

  // Add a class to forms which should display inline errors
  $ife_form_ids = checkdesk_core_ife_form_ids();
  foreach ($ife_form_ids as $fid => $row) {
    if($form_id == $fid) {
      $form['#attributes']['class'][] = 'ife';
    }
  }
  
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    $items = array();
    $fb_block = module_invoke('fboauth', 'block_view', 'login');
    $items[] = twitter_signin_button();;
    $items[] = $fb_block['content'];
    $form['social_media_signin'] = array(
      '#type' => 'item',
      '#title' => t('Sign in with :'),
      '#markup' => theme('item_list', array('items' => $items)),
      '#weight' => '-99',
    );
    $form['pass']['#title'] = $form['pass']['#title'] . l(t('(forgot?)'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
    $items = array();
    if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
      $items[] = l(t('Create new account'), 'user/register', array('attributes' => array('title' => t('Create a new user account.'))));
    }
    $form['links'] = array('#markup' => theme('item_list', array('items' => $items)));
    $form['actions']['submit']['#value'] = t('Sign in');
    unset($form['twitter_signin']);
  }

  if ($form_id == '_checkdesk_core_report_suggest') {
    $form['story']['#prefix'] = '<div class="modal-content-wrapper">';
    $form['story']['#suffix'] = '</div>';

    $form['submit']['#prefix'] = '<div class="modal-footer"><div class="form-actions form-wrapper"><a id="close" class="btn" data-dismiss="modal" aria-hidden="true">' . t('Close') . '</a>';
    $form['submit']['#suffix'] = '</div></div>';
    $form['submit']['#value'] = t('Continue');
    $form['submit']['#attributes']['class'] = array('btn', 'btn-primary');
  }

  if ($form_id == 'flag_confirm') {
    $form['actions']['#prefix'] = '<div class="modal-footer">';
    $form['actions']['#suffix'] = '</div>';

    $form['actions']['submit']['#attributes']['class'] = array('btn', 'btn-primary');
    $form['actions']['cancel']['#attributes']['class'] = array('btn');
    $form['actions']['cancel']['#attributes']['id'] = array('close');
    $form['actions']['cancel']['#weight'] = -1;
  }
  if ($form_id == 'node_delete_confirm') {
    if (isset($form['#node'])) {
      if ($form['#node']->type == 'discussion') {
        $form['description']['#markup'] = t('All related updates will be deleted. Are you sure you want to proceed?');
      }
    }
  }
  if ($form_id == 'user_register_form') {
    global $user;
    //Hide administer role so journalist can not give his account a higher role.
    if (!in_array('administrator', $user->roles) && in_array('journalist', $user->roles)) {
      $form['account']['roles']['#options'] = array_diff($form['account']['roles']['#options'], array('administrator'));
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function checkdesk_core_user_insert(&$edit, $account, $category) {
  module_load_include('lib.php', 'twitter');
  //Add new citizen journalist role to all registered users
  $user_roles = array_flip(user_roles(TRUE));
  $account->roles = array($user_roles['citizen journalist'] => $user_roles['citizen journalist']) + $edit['roles'];

  // Profile image for Twitter
  if (isset($_SESSION['twitter']) && isset($_SESSION['twitter']['values'])) {
    $key = variable_get('twitter_consumer_key', '');
    $secret = variable_get('twitter_consumer_secret', '');
    $response = $_SESSION['twitter']['values'];

    $twitter = new Twitter($key, $secret, $response['oauth_token'], $response['oauth_token_secret']);
    try {
      $twitter_account = $twitter->users_show($response['screen_name']);
    } catch (TwitterException $e) {
      form_set_error('screen_name', t('Request failed: @message.', array('@message' => $e->getMessage())));
      return;
    }
    $twitter_account->set_auth($response);
    _twitter_signin_get_picture($account, $twitter_account);
  }
}

/**
 * Import twitter profile picture
 **/
function _twitter_signin_get_picture($account, $twitter_account) {
  if ($account->uid) {
    $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
    if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)) {
      $source_url = $twitter_account->profile_image_url; 
      $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/twitter-picture-' . $account->uid . '-' . REQUEST_TIME . substr($source_url, -4));
      $picture_file = file_save_data(file_get_contents($source_url), $picture_path, FILE_EXISTS_REPLACE);

      // Check to make sure the picture isn't too large for the site settings.
      $max_dimensions = variable_get('user_picture_dimensions', '85x85');
      file_validate_image_resolution($picture_file, $max_dimensions);
      // Update the user record.
      $picture_file->uid = $account->uid;
      $picture_file = file_save($picture_file);
      file_usage_add($picture_file, 'user', 'user', $account->uid);
      db_update('users')
        ->fields(array(
          'picture' => $picture_file->fid,
        ))
        ->condition('uid', $account->uid)
        ->execute();
    }
  }
}

/**
 * Implements hook_views_query_alter
 * @param type $view
 * @param type $query 
 */
function checkdesk_core_views_query_alter(&$view, &$query) {
  // On desk reports, show suggested reports first
  if ($view->name == 'desk_reports') {
    if (is_numeric(arg(1))) {
      $story_id = arg(1);
      $sort_order = isset($_REQUEST['sort_order']) ? $_REQUEST['sort_order'] : 'DESC';
      // Another approach to do the same thing, but probably slower
      // $view->query->orderby[0]['field'] = "(SELECT COUNT(*) FROM {field_data_field_stories} WHERE entity_id = node.nid AND field_stories_target_id = $story_id)";
      $join = new views_join();
      $join->construct('field_data_field_stories', 'node', 'nid', 'entity_id', array(), 'LEFT');
      $query->add_relationship('f', $join, 'field_data_field_stories');
      $query->add_field('node', 'nid', 'nid', array('function' => 'groupby'));
      $query->add_groupby('node.nid');
      $query->orderby = array(array('field' => "(f.field_stories_target_id IS NOT NULL AND f.field_stories_target_id = $story_id)", 'direction' => 'DESC'), array('field' => 'node.created', 'direction' => $sort_order));
    }
  }
}

/**
 * Implements hook_views_api().
 */
function checkdesk_core_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'checkdesk_core'),
  );
}

/**
 * Register a directory containing Wysiwyg plugins.
 *
 * @param $type
 *   The type of objects being collected: either 'plugins' or 'editors'.
 * @return
 *   A sub-directory of the implementing module that contains the corresponding
 *   plugin files. This directory must only contain integration files for
 *   Wysiwyg module.
 */
function checkdesk_core_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return 'ckeditor/' . $type;
  }
}

/**
 * Implements hook_wysiwyg_plugin()
 */
function checkdesk_core_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor':
      if ($version >= 4) {
        return array(
          'confighelper' => array(
            'vendor url' => 'http://alfonsoml.blogspot.com/2012/02/configuration-helper-for-ckeditor.html',
            'path' => drupal_get_path('module', 'checkdesk_core') . '/ckeditor/plugins/confighelper',
            'filename' => 'plugin.js',
            'extensions' => array(
              'confighelper' => t('Config helper'),
            ),
            'load' => TRUE,
          ),
        );
      }
      break;
  }
}

/**
 * Implementation of hook_wysiwyg_editor_settings_alter().
 *
 * Have the editor use the current language. There are open bugs for WYSIWYG
 * module to do this automatically..
 */
function checkdesk_core_wysiwyg_editor_settings_alter(&$settings, $context) {
  global $language, $base_path;

  $settings['language']       = $language->language;
  $settings['directionality'] = $language->direction == LANGUAGE_RTL ? 'rtl' : 'ltr';

  if ($language->direction == LANGUAGE_RTL) {
    foreach ($settings['contentsCss'] as $key => $path) {
      $filepath = substr(preg_replace('/^' . preg_quote($base_path, '/') . '/', '', $path), 0, -4);
      $filepath_rtl = $filepath . '-rtl.css';

      if (file_exists($filepath_rtl)) {
        $settings['contentsCss'][$key] = $base_path . $filepath_rtl;
      }
    }
  }

  // Hide crazy link settings
  $settings['linkShowAdvancedTab'] = FALSE;
  $settings['linkShowTargetTab'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter() for `user_cancel_confirm_form`.
 */
function checkdesk_core_form_user_cancel_confirm_form_alter(&$form, $form_state) {
  $form['#action'] .= '?destination=administer-users';
}

/**
 * Ensures that the IFE module settings are properly installed in the database.
 */
function checkdesk_core_ensure_ife_settings() {

  $form_ids = checkdesk_core_ife_form_ids();

  $defaults = array(
    'field_types' => NULL,
    'status'      => '1',
    'display'     => '-1'
  );

  db_query("TRUNCATE TABLE {ife}");

  foreach ($form_ids as $form_id => $row) {
    $row = array_merge($defaults, $row);

    $row['form_id'] = $form_id;

    db_insert('ife')
      ->fields($row)
      ->execute();
  }
}

/**
 * Forms that will use inline form errors
 */

function checkdesk_core_ife_form_ids() {
  $form_ids = array(
    'article_node_form'     => array(),
    'discussion_node_form'  => array(),
    'forum_node_form'       => array(),
    'media_node_form'       => array(),
    'node_export_node_form' => array(),
    'page_node_form'        => array(),
    'post_node_form'        => array(),
    'flag_confirm'          => array(),

    'comment_form'          => array(),

    'contact_mail_page'     => array(),
    'contact_mail_user'     => array(),

    'user_login'            => array(),
    'user_login_block'      => array(),
    'user_pass'             => array(),
    'user_register_form'    => array(),
    'user_profile_form'     => array(),
  );

  return $form_ids;
}

/**
 * Implements hook_query_TAG_alter() for features_menu_links.
 */
function checkdesk_core_query_features_menu_link_alter($query) {
  $query->fields('menu_links', array('uuid', 'language', 'customized'));
}

/**
 * Implements hook_form_FORM_ID_alter() for `flag_confirm`.
 */
function checkdesk_core_form_flag_confirm_alter(&$form, $form_state, $form_id) {
  $form['field_reason'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Reason');
}

/**
 * Implements hook_form_FORM_ID_alter() for `twitter_oauth_callback_form`.
 */
function checkdesk_core_form_twitter_oauth_callback_form_alter(&$form, $form_state) {
  $_GET['destination'] = 'user/register';
}
